{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/nextJsStyledComponentinSSR/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"690a89b7-c1b9-50d2-8fa2-7c8894a4fad0","excerpt":"를 사용하여 서비스를 구축하였고 를 사용하여 스타일을 입혀주고있습니다.\n그런데 프로필 페이지에서 인 경우에 를 가져오지 못해 가 적용되지 않은 기본 을 보여줍니다.. 그래서 유저 경험이 매우 좋지 않습니다.. 문제를 해결하기위해 구글링을 하던중.. 인 경우에 에서 스타일 정보()를 포함하지 않은채 렌더링되기 때문이라는 글을 발견하였고,\n공식문서를 찾아보니 아래와 같은 글을 발견하였습니다. Basically you need to add a custom pages/document.js (if you…","html":"<p><code class=\"language-text\">nextjs</code>를 사용하여 서비스를 구축하였고 <code class=\"language-text\">styled-component</code>를 사용하여 스타일을 입혀주고있습니다.\n그런데 프로필 페이지에서 <code class=\"language-text\">SSR</code>인 경우에 <code class=\"language-text\">css</code>를 가져오지 못해 <code class=\"language-text\">css</code>가 적용되지 않은 기본 <code class=\"language-text\">html</code>을 보여줍니다.. 그래서 유저 경험이 매우 좋지 않습니다..</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProfileContainer</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>문제를 해결하기위해 구글링을 하던중..</p>\n<p><code class=\"language-text\">SSR</code>인 경우에 <code class=\"language-text\">nextjs</code>에서 스타일 정보(<code class=\"language-text\">styled-components</code>)를 포함하지 않은채 렌더링되기 때문이라는 글을 발견하였고,\n공식문서를 찾아보니 아래와 같은 글을 발견하였습니다.</p>\n<blockquote>\n<p>Basically you need to add a custom pages/<em>document.js (if you don’t have one). **Then [copy the logic](<a href=\"https://github.com/vercel/next.js/blob/master/examples/with-styled-components/pages/\">https://github.com/vercel/next.js/blob/master/examples/with-styled-components/pages/</a></em>document.js) for styled-components to inject the server side rendered styles into the <head>.**\nRefer to <a href=\"https://github.com/vercel/next.js/tree/master/examples/with-styled-components\">our example</a> in the Next.js repo for an up-to-date usage example.</p>\n</blockquote>\n<p>nextjs 저장소에 있는 <a href=\"https://github.com/vercel/next.js/blob/master/examples/with-styled-components/pages/_document.js\">documnet.js</a>를 따라서 해보았지만</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">getInitalProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> sheet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerStyleSheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> originalRenderPage <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>renderPage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      ctx<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">renderPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">originalRenderPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function-variable function\">enhanceApp</span><span class=\"token operator\">:</span> <span class=\"token parameter\">App</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> sheet<span class=\"token punctuation\">.</span><span class=\"token function\">collectStyles</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> initialProps <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Document<span class=\"token punctuation\">.</span><span class=\"token function\">getInitialProps</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>initialProps<span class=\"token punctuation\">,</span>\n        styles<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>initialProps<span class=\"token punctuation\">.</span>styles<span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span>sheet<span class=\"token punctuation\">.</span><span class=\"token function\">getStyleElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      sheet<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>여전히.. <code class=\"language-text\">SSR</code>에서 <code class=\"language-text\">styled-component</code> 로 만든 컴포넌트에 <code class=\"language-text\">css</code>가 적용되지 않습니다…</p>\n<p>그래서 <code class=\"language-text\">dynamic import</code>를 사용하여 문제를 해결해보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> ProfileContainer <span class=\"token operator\">=</span> <span class=\"token function\">dynamic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../features/user/profile/ProfileContainer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">loading</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ModalLoadingComponent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  ssr<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProfileContainer</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">SSR</code>일때는 로딩컴포넌트를 보여주고 <code class=\"language-text\">SSR</code>이 끝나면 프로필 페이지에 보여야하는 컴포넌트를 보여주는 방식으로 변경하니.. 일단 크게크게 깨지는 것을 사용자에게 보여주는 문제는 해결하였지만… 로딩바 역시 스타일드 컴포넌트이기때문에 <code class=\"language-text\">SSR</code>일때 잠깐 깨집니다.. 여러 컴포넌트가 깨지는 것보다 하나의 로딩 컴포넌트만 꺠지는 것이 그래도 더 나을것이라 생각하여 이렇게 문제를 해결했(?)지만…</p>\n<p><img src=\"https://images.velog.io/images/yhe228/post/8581f23c-e851-4e49-b8ff-cc249f240153/image.png\">\n아주 정말 잠깐.. 0.03초?.. 정도…? 보였다가 아래처럼 예쁘게 나옵니다…</p>\n<p>저 로딩 아이콘은 <code class=\"language-text\">antd</code>라는 라이브러리에서 제공해주는 것인데..\n<code class=\"language-text\">antd</code>에서 가져온 컴포넌트들은 <code class=\"language-text\">SSR</code>에서 잘 나오더라구요… 😅\n<img src=\"https://images.velog.io/images/yhe228/post/05d5ac2d-acad-44cc-b118-428b5c2f2705/image.png\"></p>\n<p>이렇게 해결하는게 맞는건가 싶네요… ㅎㅎ…\nSSR인 경우에 nextjs에서 스타일 정보(styled-components) 포함한채로 렌더링이 되려면 어떻게 해야하는지 계속해서 찾아봐야겠습니다…</p>\n<p>혹시 방법을 아시는분은 댓글을 꼬옥… 남겨주시길 바랍니다 🥲\n도와주세요 🥲</p>\n<h2 id=\"참고글\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EA%B8%80\" aria-label=\"참고글 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고글</h2>\n<ul>\n<li><a href=\"https://kokohapps.tistory.com/entry/Nextjs-nextdynamic-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-%ED%8A%B9%EC%A0%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-SSR-%EC%95%88%ED%95%98%EA%B3%A0-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C%EB%A7%8C-%EB%A0%8C%EB%8D%94%EB%A7%81%ED%95%98%EA%B8%B0\">Next.js - next/dynamic 이용해서, 특정 컴포넌트 SSR 안하고, 클라이언트에서만 렌더링하기.</a></li>\n<li><a href=\"https://nextjs.org/docs/advanced-features/dynamic-import\">Dynamic Import</a></li>\n</ul>","frontmatter":{"title":"< 미해결 > NextJs 사용중 SSR에서 styled-component가 깨지는 문제","date":"April 27, 2021"}}},"pageContext":{"slug":"/react/nextJsStyledComponentinSSR/","previous":{"fields":{"slug":"/review/react_11/"},"frontmatter":{"title":"< 코드숨 > 리액트 11~12주차 회고(개인 프로젝트 3~4주차)","category":"review","draft":false}},"next":{"fields":{"slug":"/css/css1/"},"frontmatter":{"title":"ios와 android에 css가 다르게 적용되는 이슈","category":"css","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}