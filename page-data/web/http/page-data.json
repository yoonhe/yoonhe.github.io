{"componentChunkName":"component---src-templates-blog-post-js","path":"/web/http/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"901b8639-0b16-513b-89c2-50688347e9db","excerpt":"HTTP란? 클라이언트와 서버가 통신하기 위해서 HTTP라고 하는 규약 혹은 규칙을 지켜서 통신을 한다. HTTP(Hypertext Transfer Protocol) Protocol ? 상호 간에 정의한 규칙을 의미한다.(규약, 규칙) 웹에서는 브라우저와 서버 간에 데이터를 주고받기 위한 방식으로 HTTP 프로토콜을 사용하고 이다. 프런트엔드 개발자라면 필수적으로 알아야 하는 지식이다 HTTP 프로토콜 특징? 상태가 없는(stateless…","html":"<h2 id=\"http란\" style=\"position:relative;\"><a href=\"#http%EB%9E%80\" aria-label=\"http란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP란?</h2>\n<p>클라이언트와 서버가 통신하기 위해서 HTTP라고 하는 규약 혹은 규칙을 지켜서 통신을 한다.</p>\n<ul>\n<li>HTTP(Hypertext Transfer Protocol)</li>\n<li>Protocol ? 상호 간에 정의한 규칙을 의미한다.(규약, 규칙)</li>\n<li>웹에서는 브라우저와 서버 간에 데이터를 주고받기 위한 방식으로 HTTP 프로토콜을 사용하고 이다.</li>\n<li>프런트엔드 개발자라면 필수적으로 알아야 하는 지식이다</li>\n</ul>\n<h2 id=\"http-프로토콜-특징\" style=\"position:relative;\"><a href=\"#http-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%ED%8A%B9%EC%A7%95\" aria-label=\"http 프로토콜 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP 프로토콜 특징?</h2>\n<ol>\n<li>\n<p>상태가 없는(stateless)</p>\n<ul>\n<li>데이터를 주고 받기 위한 각각의 데이터 요청이 서로 독립적으로 관리가 된다</li>\n<li>매번 보내는 요청이 독립적이기 때문에 문맥이라는 것이 형성되지 않는다.</li>\n<li>이전 데이터 요청과 다음 데이터 요청이 서로 관련이 없다</li>\n<li>\n<p>장점</p>\n<ul>\n<li>세션과 같은 별도의 추가 정보를 관리하지 않아도 된다.</li>\n<li>다수의 요청 처리 및 서버의 부하를 줄일 수 있다.</li>\n</ul>\n</li>\n<li>HTTP 프로토콜은 일반적으로 TCP/IP 통신 위에서 동작한다.</li>\n<li>기본 포트는 80번이다.</li>\n</ul>\n</li>\n<li>\n<p>connectionless</p>\n<ul>\n<li>한번의 요청에는 한번의 응답을 한다.</li>\n<li>응답 이후에는 연결이 끊기기 때문에 더이상 응답을 할 수 없다.</li>\n<li>ex) (A) 피시방갈래? => 언제? (ㅇ) , (A) 피시방갈래? => (1)언제?(ㅇ) (2)무슨 게임 할건데?(x)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"http-request--http-response\" style=\"position:relative;\"><a href=\"#http-request--http-response\" aria-label=\"http request  http response permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP Request &#x26; HTTP Response</h2>\n<ul>\n<li>HTTP 프로토콜로 데이터를 주고받기 위해서는 요청(Request)을 보내고 응답(Response)을 받아야 한다.</li>\n<li>클라이언트란 요청을 보내는 쪽을 의미하며 일반적으로 웹 관점에서는 브라우저를 의미한다.</li>\n<li>서버란 요청을 받는 쪽을 의미하며 일반적으로 데이터를 보내주는 원격지의 컴퓨터를 의미한다.</li>\n</ul>\n<h2 id=\"url\" style=\"position:relative;\"><a href=\"#url\" aria-label=\"url permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL</h2>\n<ul>\n<li>URL(Uniform Resource Locators)</li>\n<li>서버에 자원을 요청하기 위해 입력하는 영문 주소<br>\n<img src=\"https://images.velog.io/post-images/yhe228/1b074dc0-3928-11ea-b4ff-9934fa3dcede/image.png\" alt=\"image.png\">\n[출처 : <a href=\"https://joshua1988.github.io/web-development/http-part1/\">캡틴판교님 블로그</a>]</li>\n</ul>\n<h2 id=\"http-요청-메서드\" style=\"position:relative;\"><a href=\"#http-%EC%9A%94%EC%B2%AD-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"http 요청 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP 요청 메서드</h2>\n<p>요청하는 데이터에 특정 동작을 수행하고 싶을때 HTTP 요청 메서드(Http Request Methods)를 이용한다.  </p>\n<ul>\n<li>\n<p>주요 메서드</p>\n<ul>\n<li>GET : 서버에 자원을 요청</li>\n<li>POST : 서버에 자원을 생성</li>\n<li>PUT : 서버에 존재하는 자원을 수정</li>\n<li>DELETE : 서버에 존재하는 자원을 제거</li>\n</ul>\n</li>\n<li>\n<p>기타 메서드</p>\n<ul>\n<li>HEAD : 서버 헤더 정보를 획득. GET과 비슷하나 Response Body를 반환하지 않음</li>\n<li>OPTIONS : 서버 옵션들을 확인하기 위한 요청. CORS에서 사용 데이터에 대한 조회, 생성, 변경, 삭제 동작을 HTTP 요청 메서드로 정의할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"http-상태-코드\" style=\"position:relative;\"><a href=\"#http-%EC%83%81%ED%83%9C-%EC%BD%94%EB%93%9C\" aria-label=\"http 상태 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP 상태 코드</h2>\n<ul>\n<li>HTTP 상태 코드(HTTP Status Code)</li>\n<li>서버에서 설정해주는 응답(Response) 정보</li>\n<li>상태 코드로 에러 처리를 할 수 있다.</li>\n</ul>\n<h2 id=\"주요-상태-코드\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9A%94-%EC%83%81%ED%83%9C-%EC%BD%94%EB%93%9C\" aria-label=\"주요 상태 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주요 상태 코드</h2>\n<h3 id=\"2xx---성공\" style=\"position:relative;\"><a href=\"#2xx---%EC%84%B1%EA%B3%B5\" aria-label=\"2xx   성공 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2xx - 성공</h3>\n<p>200번대의 상태 코드는 대부분 성공을 의미한다.</p>\n<ul>\n<li>200 : GET 요청에 대한 성공</li>\n<li>204 : No Content. 성공했으나 응답 본문에 데이터가 없음</li>\n<li>205 : Reset Content. 성공했으나 클라이언트의 화면을 새로 고침하도록 권고</li>\n<li>206 : Partial Conent. 성공했으나 일부 범위의 데이터만 반환</li>\n</ul>\n<h3 id=\"3xx---리다이렉션\" style=\"position:relative;\"><a href=\"#3xx---%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98\" aria-label=\"3xx   리다이렉션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3xx - 리다이렉션</h3>\n<p>300번대의 상태 코드는 대부분 클라이언트가 이전 주소로 데이터를 요청하여 서버에서 새 URL로 리다이렉트를 유도하는 경우입니다.</p>\n<ul>\n<li>301 : Moved Permanently, 요청한 자원이 새 URL에 존재</li>\n<li>303 : See Other, 요청한 자원이 임시 주소에 존재</li>\n<li>304 : Not Modified, 요청한 자원이 변경되지 않았으므로 클라이언트에서 캐싱된 자원을 사용하도록 권고. ETag와 같은 정보를 활용하여 변경 여부를 확인</li>\n</ul>\n<h3 id=\"4xx---클라이언트-에러\" style=\"position:relative;\"><a href=\"#4xx---%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%97%90%EB%9F%AC\" aria-label=\"4xx   클라이언트 에러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4xx - 클라이언트 에러</h3>\n<p>400번대 상태 코드는 대부분 클라이언트의 코드가 잘못된 경우입니다. 유효하지 않은 자원을 요청했거나 요청이나 권한이 잘못된 경우 발생합니다. 가장 익숙한 상태 코드는 404 코드입니다. 요청한 자원이 서버에 없다는 의미죠.</p>\n<ul>\n<li>400 : Bad Request, 잘못된 요청</li>\n<li>401 : Unauthorized, 권한 없이 요청. Authorization 헤더가 잘못된 경우</li>\n<li>403 : Forbidden, 서버에서 해당 자원에 대해 접근 금지</li>\n<li>405 : Method Not Allowed, 허용되지 않은 요청 메서드</li>\n<li>409 : Conflict, 최신 자원이 아닌데 업데이트하는 경우. ex) 파일 업로드 시 버전 충돌</li>\n</ul>\n<h3 id=\"5xx---서버-에러\" style=\"position:relative;\"><a href=\"#5xx---%EC%84%9C%EB%B2%84-%EC%97%90%EB%9F%AC\" aria-label=\"5xx   서버 에러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5xx - 서버 에러</h3>\n<p>500번대 상태 코드는 서버 쪽에서 오류가 난 경우입니다.</p>\n<ul>\n<li>501 : Not Implemented, 요청한 동작에 대해 서버가 수행할 수 없는 경우</li>\n<li>503 : Service Unavailable, 서버가 과부하 또는 유지 보수로 내려간 경우</li>\n</ul>\n<p><img src=\"https://images.velog.io/post-images/yhe228/470a2130-3929-11ea-a38d-79c434df4124/image.png\" alt=\"image.png\"><br>\n[이미지 출처 : <a href=\"https://joshua1988.github.io/web-development/http-part1/\">캡팁판교님 블로그</a>]</p>\n<p>👨‍🏫 <a href=\"https://joshua1988.github.io/web-development/http-part1/\">참고블로그 - 캡틴판교(프런트엔드 개발자가 알아야하는 HTTP 프로토콜 Part 1)</a>\n👨‍🏫 <a href=\"https://www.zerocho.com/category/HTTP/post/5b3ba2d0b3dabd001b53b9db\">참고블로그 - 제로초(알아둬야 할 HTTP 공통 &#x26; 요청 헤더)</a></p>","frontmatter":{"title":"HTTP란","date":"November 15, 2019"}}},"pageContext":{"slug":"/web/http/","previous":{"fields":{"slug":"/web/httpRequestMessage/"},"frontmatter":{"title":"HTTP Request message","category":"web","draft":false}},"next":{"fields":{"slug":"/web/httpHeader/"},"frontmatter":{"title":"HTTP 공통 & 요청 헤더","category":"web","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}