{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"탭 영역과 드롭 다운 영역 외를 클릭하면 드롭다운 메뉴가 사라지는 것을 구현하고자 합니다. 먼저 첫번째로 위의 탭 영역에  를 사용해 참조를 걸어줍니다. 두번째로  안에서   에   이벤트 리스너를 생성합니다.  로 생성된 객체의  에는  라는 메서드가 있는데  이 메서드에 현재 클릭한 엘리먼트를 인자로 넘기게 되면 참조중인 엘리먼트에 속해 있을 경우는 …","fields":{"slug":"/react/react-컴포넌트-특정-영역-외-클릭-감지/"},"frontmatter":{"date":"May 05, 2021","title":"React 컴포넌트 특정 영역 외 클릭 감지","category":"react","draft":false}}},{"node":{"excerpt":"","fields":{"slug":"/review/temp/"},"frontmatter":{"date":"May 02, 2021","title":"temp","category":"review","draft":false}}},{"node":{"excerpt":"Merge Sort라는 문제는 순서가 뒤죽박죽인 배열을 sort를 사용하지 않고 배열을 오름차순으로 정렬하는 문제인데 어떻게 Sort를 사용하지 않고 오름차순으로 정렬해야할지 감이 잡히지 않아 구글에 검색해보았더니 Merge Sort(병합정렬) 방법에 대한 글이 많이 나왔다. 그 중 그림으로 표현이 잘되어있는 글을 보고 이해한 내용을 정리한다 Merge …","fields":{"slug":"/algorithm/toy20-MergeSort/"},"frontmatter":{"date":"February 20, 2020","title":"Toy problem 20번 - Merge Sort","category":"algorithm","draft":false}}},{"node":{"excerpt":"static Express에서 이미지, CSS 파일 및 JavaScript 파일과 같은 정적 파일을 제공 static 기본 형태 정적 파일이 포함된 디렉토리의 이름을 express.static 미들웨어 함수에 전달하면 파일의 직접적인 제공을 시작한다 가상 경로 사용 express.static 함수를 통해 제공되는 파일에 대한 가상 경로를 작성할 수 있다.…","fields":{"slug":"/javascript/middleStatic/"},"frontmatter":{"date":"February 18, 2020","title":"미들웨어 함수 static","category":"javascript","draft":false}}},{"node":{"excerpt":"위의 코드에서 과 에 대해 두루뭉실할게 알고 사용한 것 같아 다시 정리를 해보려 한다. res.sendFile(path, options, callback)  : path의 파일을 읽고 해당 내용을 클라이언트로 전송한다. sendFile : 로  요청이 오게되면  해당 경로의 파일을 읽고 내용을 클라이언트로 전송한다. __dirname : node 프로세스…","fields":{"slug":"/javascript/resSendFileANDpathJoin/"},"frontmatter":{"date":"February 18, 2020","title":"res.sendFile & path.join","category":"javascript","draft":false}}},{"node":{"excerpt":"❓ 내가 궁금했던점 ❓ 아래의 코드를 보고, fetch에서  요청을 하게되면 서버에서 데이터를 문자열로 주기때문에 를  통해 자바스크립트 오브젝트로 바꿔준다고 이해했다. 아래와같이  사용시에는 를   를 통해 문자열로 바꿔서 응답을 해주고  사용시에는  를 통해 응답을 해주는데  안에 http 모듈에서 object를 문자열로 바꿔주기위해 사용했던  와 같…","fields":{"slug":"/javascript/expressSendJsonMethod/"},"frontmatter":{"date":"February 11, 2020","title":"[Express 프레임워크] send메소드와 end메소드의 차이점&작동방식","category":"javascript","draft":false}}},{"node":{"excerpt":"CORS - Cross Origin Resource Sharing cross origin에서 리소스(서버자원)을 요청하여 사용한다.\n다른서버에 있는 리소스 자원을 요청해 사용하기 위해 필요하다. MDN\nCross-Origin Resource Sharing (CORS) 은 추가 HTTP 헤더를 사용하여 브라우저에게 한 출처에서 실행중인 웹 응용 프로그램의 …","fields":{"slug":"/javascript/CORS/"},"frontmatter":{"date":"February 02, 2020","title":"CORS","category":"javascript","draft":false}}},{"node":{"excerpt":"express express는 MERN stack 의 server framework이다. express framework를 사용하려면 먼저 아래와 같은 코드를 사용해 npm에서 다운로드 받아야 한다.\n   먼저 간단한 exprerss 서버를 만들어서 hello world를 받아 보는 것부터 시작했다.   위의 연습코드에서  해당 부분이 어떤 역할을 하는지…","fields":{"slug":"/javascript/NodeJSExpressBasic/"},"frontmatter":{"date":"February 02, 2020","title":"express framework - 1(feat. NODE_ENV)","category":"javascript","draft":false}}},{"node":{"excerpt":"Node.js Node.js는 Chrome V8 JavaScript 엔진으로 빌드된 Javascript 런타임이다. V8 JavaScript 엔진 자바스크립트를 기계어로 컴파일 해주는 역할 런타임 프로그래밍 언어가 구동되고 있는 환경 즉, Node.js는  자바스크립트를 기계어로 컴파일 해주는 엔진으로 빌드 되어있는, 자바스크립트가 구동중인 환경이다. 자…","fields":{"slug":"/javascript/nodeJS/"},"frontmatter":{"date":"February 02, 2020","title":"nodeJS","category":"javascript","draft":false}}},{"node":{"excerpt":"자바스크립트 엔진 자바스크립트 엔진의 대표적인 예는 Google V8 엔진이다. V8 은 Chrome과 Node.js에서 사용한다. 엔진의 주요 두 구성요소 Memory Heap : 메모리 할당이 일어나는 곳 Call Stack : 코드 실행에 따라 호출 스택이 쌓이는 곳\nScreenshot from 2020-02-01 14-17-57.png 이미지 출처…","fields":{"slug":"/javascript/EventLoop/"},"frontmatter":{"date":"February 01, 2020","title":"Event Loop?","category":"javascript","draft":false}}},{"node":{"excerpt":"브라우저에서 웹페이지를 요청하거나 링크를 클릭하면 화면 갱신이 발생한다. 이것은 브라우저와 서버와의 통신에 의한 것이다. image.png\n[이미지 출처 : poiemaweb] 01. 웹페이지 렌더링 image.png\n[이미지 출처 : poiemaweb]   서버는 요청받은 페이지(HTML)를 반환하는데 이때 HTML에서 로드하는 CSS나 JavaScri…","fields":{"slug":"/javascript/AJAX/"},"frontmatter":{"date":"January 18, 2020","title":"AJAX?","category":"javascript","draft":false}}},{"node":{"excerpt":"API API(Application Programming Interface, 응용 프로그램 프로그래밍 인터페이스)는 “응용 프로그램에서” 사용할 수 있도록, “운영 체제나 프로그래밍 언어가 제공하는 기능\"\"을 제어할 수 있게 만든 인터페이스를 뜻한다.\n출처 : 위키피디아   운영체제나 프로그래밍 언어가 제공하는 기능 SK의 날씨정보, Daum의 지도정보,…","fields":{"slug":"/javascript/API/"},"frontmatter":{"date":"January 18, 2020","title":"API란?","category":"javascript","draft":false}}},{"node":{"excerpt":"브라우저의 핵심 기능 사용자가 참조하고자 하는 웹페이지를 서버에 요청(Request)하고 서버의 응답(Reponse)을 받아 브라우저에 표시하는 것이다. 01. HTML, CSS 처리 과정 HTML, CSS는 렌더링 엔진이 처리한다. 브라우저는 서버로부터 HTML, CSS, JavaScript, 이미지 파일 등을 응답받는다. HTML, CSS 파일은 렌더…","fields":{"slug":"/javascript/browser/"},"frontmatter":{"date":"January 17, 2020","title":"브라우저 동작 원리","category":"javascript","draft":false}}},{"node":{"excerpt":"server 작동 원리? server는 리소스 요청과 응답에 대한 처리를 한다. 클라이언트 : 웹브라우저가 설치된 컴퓨터 서버 : 웹서버가 설치된 컴퓨터 클라이언트에서 서버에 원하는 리소스를 요청한다. 서버는 데이터베이스에 저장된 리소스를 찾아서 클라이언트에 응답한다. image.png\n이미지 출처 : 생활코딩  👨‍🏫참고블로그","fields":{"slug":"/javascript/server/"},"frontmatter":{"date":"January 17, 2020","title":"server 작동 원리","category":"javascript","draft":false}}},{"node":{"excerpt":"p태그 안에 모든 단어들을 span으로 감싸주고 각 단어를 초당 1회씩 color를 변경시켜주는 문제이다 01. 풀이 02. animate에서 color 속성 사용 에러문제 😱 Jquery로 작성해야 테스트가 통과한다고 하여 color 바꿔주는 부분을 jQuery animate와 delay를 사용해서 작성도 해보았다. 그런데 animate 사용하면 fon…","fields":{"slug":"/algorithm/toy10-htmljQueryColor/"},"frontmatter":{"date":"January 14, 2020","title":"Toy Problem 10번 - htmljQueryColor","category":"algorithm","draft":false}}},{"node":{"excerpt":"new 연산자는 사용자 정의 객체 타입 또는 내장 객체 타입의 인스턴스를 생성한다. (MDN) new가 하는 일 새로운 빈 객체를 만들어낸다. this를 새로 만들어진 객체에 bind한다. 새로 만들어진 객체에 ”proto“라 불리는 property를 더한다. 이것은 constructor 함수의 prototype 객체를 의미한다. return this를 …","fields":{"slug":"/javascript/newOperator/"},"frontmatter":{"date":"January 13, 2020","title":"New Operator","category":"javascript","draft":false}}},{"node":{"excerpt":"함수를 호출하면 stack에 execution context(실행 컨텍스트)가 배치된다. stack? stack의 마지막 항목에서 추가와 제거가 발생되는 구조이다.(후입선출) execution contexts(실행 컨텍스트)? 어떤 함수가 호출되면, 실행 컨텍스트 execution context가 만들어진다 call stack에 push 함수를 벗어나면(…","fields":{"slug":"/javascript/recursionStepByStep/"},"frontmatter":{"date":"January 13, 2020","title":"recursion step-by-step","category":"javascript","draft":false}}},{"node":{"excerpt":"가위바위보의 경우의 수를 구하는 문제에 도대체 어떻게 접근해야할지 감이 안잡혀\nhelp desk에 물어본 결과 아래와 같은 좋은 답변을 받을 수 있었다..! image.png 그래서, 엔지니어분의 말씀 처럼 rockPaperScissors(0), rockPaperScissors(1), rockPaperScissors(2), rockPaperScissors…","fields":{"slug":"/algorithm/toy01-rockPaperScissors/"},"frontmatter":{"date":"January 12, 2020","title":"Toy Problem 1번 - rockPaperScissors","category":"algorithm","draft":false}}},{"node":{"excerpt":"1차 HA 객관식 문제 오답 01 what is the value of  after running the code below? 🧚‍♀️ 정답 : 10 너무나 쉬운 문제를 틀려버렸다.. 영어만 보면 긴장을 하는 내가.. result의 값인 20을 답으로 적어버렸다 허허.. 02 What is the value of  after running the code be…","fields":{"slug":"/etc/hA01-MultipleChoice/"},"frontmatter":{"date":"January 11, 2020","title":"객관식 문제 오답풀이","category":"etc","draft":false}}},{"node":{"excerpt":"인스턴스화 패턴은 JavaScript로 무언가를 만드는 방법이다. JavaScript는 객체를 생성하는 4가지 방법을 제공하는데 어떤 방법을 사용하든 모든 방법은 다음과 같은 기능을 제공한다.   object 생성 object에 methods 및 properties 생성 JavaScript에는 아래와 같이 네가지 instantiation pattern이 …","fields":{"slug":"/javascript/instantiationPattern/"},"frontmatter":{"date":"January 10, 2020","title":"instantiation pattern 장단점","category":"javascript","draft":false}}},{"node":{"excerpt":"증감 연산자(++)의 특징 접미사로 사용되면 증가하기 전에 값을 반환한다. 접두사로 사용되면 증분 후 값을 반환한다. 예시1) b에 a의 value인 5가 할당되고 그 후에 a가 증가(++) 된다. a가 증가(++)된 후에 b에 a가 증가(++)된 값인 6이 할당된다. 예시2) 접미사로 사용되었을때,   objcount = val를 실행한다. count를…","fields":{"slug":"/javascript/plusplus/"},"frontmatter":{"date":"January 10, 2020","title":"접미사/접두사 연산자의 차이","category":"javascript","draft":false}}},{"node":{"excerpt":"1. 일반 함수에서 this 함수를 선언할 때 this에 바인딩할 객체가 정적으로 결정되는 것이 아니고, 함수를 호출할 때 함수가 어떻게 호출되었는지에 따라 this에 바인딩할 객체가 동적으로 결정된다. (B)에서 this가 window를 가르키는 이유? 생성자 함수와 객체의 메소드를 제외한 모든 함수(내부 함수, 콜백 함수 포함) 내부의 this는 전역…","fields":{"slug":"/javascript/arrowFunctionThis/"},"frontmatter":{"date":"December 28, 2019","title":"화살표 함수에서 this","category":"javascript","draft":false}}},{"node":{"excerpt":"💁‍♀️ 오늘 알게된 사실   객체에 새로운 값을 설정해 주면 현재 참조하고 있던 주소값은 제거되고 다른 reference type을 가리키게 된다. 3번 - After the following code runs, what will be the value of x.foo? 👉🏻 x.foo === 3 4번 - After the following code runs,…","fields":{"slug":"/etc/checkpoints-09/"},"frontmatter":{"date":"December 24, 2019","title":"Checkpoints 09 TIL","category":"etc","draft":false}}},{"node":{"excerpt":"8번 - After the following code runs, what will be the value of result? 나는 처음에 위의 코드에서 에러가 나는 이유가 객체는 자신의 key, value를 참조할 수 없기때문에 에서 에러가 난다고 생각했다. 확실한 이해를 위해 help desk에 질문을 올렸고 내가 잘못 이해하고 있었다는 사실을 알게되었…","fields":{"slug":"/etc/checkpoints-10-8/"},"frontmatter":{"date":"December 24, 2019","title":"Checkpoints 10 - 8 문제 해결 TIL","category":"etc","draft":false}}},{"node":{"excerpt":"오늘 6번째 checkpoint를 풀다가 결과값이 왜 이렇게 나오는지 아무리봐도 이해가 안가는 문제가 있어 구글링을 해보았다. 일단, 내가 이해 안갔던 문제 내가 잘못 알았던 사실 callback(20)이 0.5초 후에 실행되고 callback 실행이 끝나면 를 실행한다 구글링 후 알게된 사실 를 먼저 실행하고 0.5초 후에 callback(20)을 실행…","fields":{"slug":"/javascript/setTimeout/"},"frontmatter":{"date":"December 23, 2019","title":"비동기프로그래밍","category":"javascript","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 HTML과 CSS를 활용하여 layout을 만드는 Sprint Check Point 4-6 (4~6까지 완료) SOS 문서 보기 느낀점 오늘 check point에서 setTimeout 문제에서 이해가 안가는 부분이 있어서 디버깅과 구글링을 통해 궁금점을 해결했다. setTimeout이 비동기 프로그래밍이기 때문에 결과값이 내가 생각하는…","fields":{"slug":"/til/20191223TIL/"},"frontmatter":{"date":"December 23, 2019","title":"2019-12-23","category":"til","draft":false}}},{"node":{"excerpt":"Subclassing 객체 지향 프로그래밍(OOP)의 Polymorphism과, Inheritance의 개념을 이해하는 것이 중요 Prototype Chain Student에서 Human의 Prototype에 있는 sleep 메소드를 사용하려면?   잘못된 방법 - 1 ✍  는 참조하는 용도로만 사용해야 한다. 잘못된 방법 - 2 ✍  Student의 p…","fields":{"slug":"/javascript/subclassing /"},"frontmatter":{"date":"December 20, 2019","title":"Subclassing","category":"javascript","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 영상 및 슬라이드 시청, TIL - , constructor, prototype, Object.create, ES6 class, super ES6 Syntax 슬라이드 보기 느낀점 오늘 첫번째로는 Advanced Data Structures reference 분석하면서 내 코드와 비교하는 시간을 가졌다. reference 코드와 내 코드…","fields":{"slug":"/til/20191220TIL/"},"frontmatter":{"date":"December 20, 2019","title":"2019-12-20","category":"til","draft":false}}},{"node":{"excerpt":"해당 포스트에 쓰인 모든 이미지의 출처는 코드스테이츠입니다. 주제 시간복잡도가 무엇이고 왜 사용되는지? 각 자료구조별 시간복잡도 분석 1. Complexity Analysis - 복잡도 분석 input n 에 대하여 알고리즘이 문제를 해결하는 데에 얼마나 오랜 시간이 걸리는 지를 분석하는 것 Big-O 표기를 이용하여 정의할 수 있다. O(1) – 상수 …","fields":{"slug":"/algorithm/timecomplexity/"},"frontmatter":{"date":"December 16, 2019","title":"timeComplexity","category":"algorithm","draft":false}}},{"node":{"excerpt":"Tree Map Mathod Tree의 메소드인 map을 구현하는데 시간이 오래 걸렸다.. map 메소드는 아래와 같은 특성을 가진다.   기존 객체와 같은 구조이되 객체의 값들은 callback 함수에 순서대로 넣어 실행시킨 값이어야 한다. 기존 객체의 주소값을 참조하면 안됨 => 얇은 복사(shallow copy) 새로운 공간에 기존 객체의 주소값과 …","fields":{"slug":"/algorithm/treeMap/"},"frontmatter":{"date":"December 16, 2019","title":"Tree Map Mathod","category":"algorithm","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 Hash table 영상 다시한번 보고 TIL 작성 Sprint - Time Complexity 다시한번 보고 TIL 작성 Hash table 구현(Advanced) - resizing 느낀점 Hash Table에서 데이터가 storage 길이의 25% 이하를 차지하고 있으면 storage의 길이를 2로 나누어 줄여줘야하고, 75% 이상…","fields":{"slug":"/til/20191216TIL/"},"frontmatter":{"date":"December 16, 2019","title":"2019-12-16","category":"til","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 How Hash Table Works 영상 및 슬라이드 시청 Time Complexity 영상 및 슬라이드 시청 Hash table 구현(basic) 느낀점 Hash table의 메소드인 insert, retrieve, remove까지는 구현하였는데… 저장된 값의 갯수에 따라 저장소 길이를 resize해주는 메소드 구현이 너무 어렵다..…","fields":{"slug":"/til/20191215TIL/"},"frontmatter":{"date":"December 15, 2019","title":"2019-12-15","category":"til","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 Graph 를 pseudoclassical style로 구현 binarySearchTree.js 를 functional style로 구현 느낀점 Graph, binarySearchTree 둘다 어려웠다.. 특히 binarySearchTree를 구현하면서 내가 작성하면서도 헤깔려서 슈도코드를 꼭 위에 적어놓고 시작했다..binarySear…","fields":{"slug":"/til/20191212TIL/"},"frontmatter":{"date":"December 12, 2019","title":"2019-12-12","category":"til","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 Basic CS Hiring Assessments reference 보면서 분석 비교  Toy problem 9 Time comflexity 복습 recursion 관련 reference 찾아보고 따라해보기 내일 할 일 Data structure 복습 linked list 가비지 컬렉션(garbage collection) 링크드 리스트(…","fields":{"slug":"/til/20200112TIL/"},"frontmatter":{"date":"December 12, 2019","title":"2020-01-12","category":"til","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 Linked List 를 functional style로 구현 Tree 를 functional shared methods style로 구현 Graph 를 pseudoclassical style로 구현 느낀점 Tree 자료구조의 contain Method를 구현하는데 어딘가에서 막혀서 한참걸렸다.. 아무리봐도 true가 나와야하는데 계속 …","fields":{"slug":"/til/20191211TIL/"},"frontmatter":{"date":"December 11, 2019","title":"2019-12-11","category":"til","draft":false}}},{"node":{"excerpt":"Hash Table 해시 테이블은 연관배열 구조를 이용하여 키(key)에 결과 값(value)을 저장하는 자료구조이다. 연관배열 구조 : 키 1개와 값 1개가 1:1로 연관되어 있는 자료구조이다. Hash Table 구조 image.png 키는 해시함수를 통해 해시로 변경되고 해시는 값과 매칭되어 저장소에 저장된다. 키(key) 고유한 값으로 해시 함수의…","fields":{"slug":"/algorithm/hashtable/"},"frontmatter":{"date":"December 10, 2019","title":"hashTable","category":"algorithm","draft":false}}},{"node":{"excerpt":"이진탐색트리(Binary Search Tree) 이진탐색트리란 이진탐색과 연결리스트(Linked list)를 결합한 자료구조의 일종이다. 이진탐색의 효율적인 탐색 능력 + 연결리스트의 효율적인 자료 입력과 삭제 기능 이진탐색과 연결리스트가 서로의 단점을 보완해준다.\nimage.png 이진탐색트리 동작 원리 왼쪽 서브트리는 루트노드보다 작은 값을 가진 노드…","fields":{"slug":"/algorithm/binarysearchtree/"},"frontmatter":{"date":"December 10, 2019","title":"Binary Search Tree","category":"algorithm","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 Queue, Stack을 Functional, Functional Shared, Prototypal, Pseudoclassical style로 구현 아래 3가지 자료구조의 모양, property 와 method의 종류와 동작 원리에 대한 학습 Tree Binary Search Tree Hash Table 느낀점 자바스크립트에서 Objec…","fields":{"slug":"/til/20191210TIL/"},"frontmatter":{"date":"December 10, 2019","title":"2019-12-10","category":"til","draft":false}}},{"node":{"excerpt":"tree Tree의 예시로 컴퓨터의 directory 구조를 생각해 볼 수 있다. 어떠한 프로그램, 사진, 영상 등을 찾을 때 우리는 폴더에서 폴더로 들어가 찾는다. 이렇게 계층적인 구조를 갖는 것이 트리라 할 수 있다. property image.png 출처 : https://monsieursongsong.tistory.com/6   Root Node …","fields":{"slug":"/algorithm/tree/"},"frontmatter":{"date":"December 09, 2019","title":"Tree","category":"algorithm","draft":false}}},{"node":{"excerpt":"Graph 노드(N, node)와 그 노드를 연결하는 간선(E, edge)을 하나로 모아 놓은 자료 구조 연결되어 있는 객체 간의 관계를 표현할 수 있는 자료구조이다. 예시) 지도, 지하철 노선도의 최단 경로 Graph 종류 1. 방향 그래프 image.png   In-degree : 다른 버텍스에서부터 오는 아크의 개수 Out-degree : 다른 버텍…","fields":{"slug":"/algorithm/graph/"},"frontmatter":{"date":"December 09, 2019","title":"graph","category":"algorithm","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 아래 5가지 자료구조의 모양, property 와 method의 종류와 동작 원리에 대한 학습 Linked List Graph Tree Binary Search Tree Hash Table 느낀점 간단하게 자료구조 모양과 property 와 method 종류와 동작 원리에 대해 학습하려 했는데.. 의도와 다르게 깊게 학습하는 바람에 복잡…","fields":{"slug":"/til/20191209TIL/"},"frontmatter":{"date":"December 09, 2019","title":"2019-12-09","category":"til","draft":false}}},{"node":{"excerpt":"Linked list image.png 엘리먼트와 엘리먼트 간의 연결(link)을 이용해서 리스트를 구현한 것 Head에는 첫번째 노드에 대한 정보가 저장되어있다. 각각의 노드에는 노드값과 다음 노드에 대한 정보가 들어있다.  다음 노드에 대한 정보를 가지고있기 때문에 하나의 연결된 값의 모임을 만들 수 있다. 🏃🏻‍♂️ Method 1. 데이터 첫번째에 추가 …","fields":{"slug":"/algorithm/linkedlist/"},"frontmatter":{"date":"December 08, 2019","title":"linkedList","category":"algorithm","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 chekpoint 1,2,3 Instantiation Patterns 4가지 복습 oop, prototype 복습 자료구조(Stack, Queue)의 모양 추상적으로 그림 그리기 자료구조(Stack, Queue)가 가지고 있는 Method를 pseudo code (의사 코드) 로 표현해보기 느낀점 자료구조(Stack, Queue)가 가지…","fields":{"slug":"/til/20191207TIL/"},"frontmatter":{"date":"December 07, 2019","title":"2019-12-07","category":"til","draft":false}}},{"node":{"excerpt":"Queue Queue는 편의점이나 마트에서 물건을 팔때 먼저 들어온 물건을 앞에 진열하여 팔리게하는 것과 비슷하다 image.png FIFO(First In First Out), 먼저 집어넣은 데이터가 먼저 나온다. 🏃🏻‍♂️ method enqueue 데이터를 집어넣는 메소드(맨 앞 요소)  dequeue 데이터를 추출하는 메소드 ✍ pseudo code (의…","fields":{"slug":"/algorithm/queueandstack/"},"frontmatter":{"date":"December 07, 2019","title":"Queue & Stack","category":"algorithm","draft":false}}},{"node":{"excerpt":"prototype 자바스크립트에는 Prototype Link 와 Prototype Object라는 것이 존재한다. 그리고 이 둘을 통틀어 Prototype이라고 부른다. 1. Prototype Object 객체는 언제나 함수(Function)로 생성된다 위와 같이 함수가 정의될 때 2가지 일이 동시에 일어난다..!   해당 함수에 Constructor(생…","fields":{"slug":"/javascript/prototype/"},"frontmatter":{"date":"December 07, 2019","title":"Prototype","category":"javascript","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 아래 3가지에 대한 학습 OOP(Object Oriented Programming)가 무엇인지? JavaScript에서 Object를 생성하는 여러가지 방법들 JavaScript에서 Prototype은 무엇이고 왜 사용해야 하는지? 느낀점 객체지향프로그래밍에서 객체들의 공통적인 특징이 모여 더 큰 객체를 이루고 다른 객체와 확실하게 구분…","fields":{"slug":"/til/20191206TIL/"},"frontmatter":{"date":"December 06, 2019","title":"2019-12-06","category":"til","draft":false}}},{"node":{"excerpt":"1. OOP(Object Oriented Programming) 01. OOP란? 객체 지향 프로그래밍(이하 OOP)는 컴퓨터 프로그램을 들의 모임으로 파악하고자 하는 프로그래밍의 패러다임 중에 하나이다. 각  들은 서로 메시지를 주고 받을 수 있으며 데이터를 처리할 수 있다. 02. OOP의 장점? 실제 생활에서 객체들은 객체들의 공통적인 특성을 모아 …","fields":{"slug":"/javascript/oop2/"},"frontmatter":{"date":"December 06, 2019","title":"oop2","category":"javascript","draft":false}}},{"node":{"excerpt":"JavaScript에서 Object를 생성하는 여러가지 방법들(Instantiation Patterns) 1. Functional position 초기값을 정해줄 수도 있다 Functional 방식은 인스턴스를 생성할 때마다 모든 메소드를 someInstance에 할당해서 각각의 인스턴스들에 해당하는 메소드의수 만큼의 메모리를 더 차지하게 된다. 2. F…","fields":{"slug":"/javascript/createobject/"},"frontmatter":{"date":"December 06, 2019","title":"CreateObject","category":"javascript","draft":false}}},{"node":{"excerpt":"🧚‍♀️ 참고링크 🧚‍♀️  Visual Studio Code Remote-WSL 확장을 사용하면 Windows Subsystem for Linux(WSL)을 VS Code에서 직접 개발 환경으로 사용할 수 있다고 한다. 설치방법 원하는 Linux 배포와 함께 Linux 용 Windows 하위 시스템을 설치한다 WSL이 아닌 Windows 측에 Visual Stud…","fields":{"slug":"/etc/wslVscode/"},"frontmatter":{"date":"December 05, 2019","title":"WSL을 VS Code에서 개발 환경으로 ","category":"etc","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 노트북 포맷하고 Nodejs 다시 깔아보기 느낀점 노트북이 너무 느려서 포맷하고 VS Code, git Bash, Nodejs 등등 다 다시깔았다, 분명 포맷 전에는 git bash에서 nvm설치하고 nvm install 명령어를 통해 nodejs가 실행이 되었는데..똑같은 방법으로 했는데도 에러가 발생해서 노트북을 다시 포맷도 해보고.…","fields":{"slug":"/til/20191205TIL/"},"frontmatter":{"date":"December 05, 2019","title":"2019-12-05","category":"til","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 recursion 과제 마무리 ( parseJSON은 아직 진행중.. ) ESLint, Jest, Prettier 설치방법 다시 한번 보기 underbar 한번더 보면서 Code Refactoring Immersive Course Sprint Office Hour 세션 참여 느낀점 오늘 결국 parseJSON을 recursion을 사용해…","fields":{"slug":"/til/20191204TIL/"},"frontmatter":{"date":"December 04, 2019","title":"2019-12-04","category":"til","draft":false}}},{"node":{"excerpt":"JSON.stringify() 함수를 Recursion을 사용해 직접 작성해보는 시간을 가져보았다. stringifyJSON 먼저 JSON.stringify에 넣고 실행하면 어떤 결과값이 나오는지 파악을 해보았다. number, boolean, null => 문자열로 변환된다 string => ‘string’ array => ’‘value’’ : 배열 안…","fields":{"slug":"/etc/stringifyJSON/"},"frontmatter":{"date":"December 02, 2019","title":"Recursion 연습 - stringifyJSON","category":"etc","draft":false}}},{"node":{"excerpt":"_.reject test 함수를 통과하지 않는 요소들만 필터하는 문제, test 함수를 통과하는 요소들을 _.filter 함수로 1차 필터 원본배열에서 1차 필터된 배열의 요소와 같지 않은 요소들을 2차 필터하여 리턴  _.map 위와 같이 _.map 함수를 작성하였는데, 원본배열을 건드리지 않고 새로운 배열을 사용해 함수를 작성하였음에도 불구하고 계속 …","fields":{"slug":"/etc/underbar/"},"frontmatter":{"date":"December 02, 2019","title":"Underbar","category":"etc","draft":false}}},{"node":{"excerpt":"jest.fn() jest는 mock 기능을 지원한다.   mocking이란? 단위 테스트를 작성할 때, 해당 코드가 의존하는 부분을 가짜(mock)로 대체하는 기법이다. mocking은 이러한 상황에서 실제 객체인 척하는 가짜 객체를 생성하는 매커니즘을 제공 테스트가 실행되는 동안 가짜 객체에 어떤 일들이 발생했는지를 기억하기 때문에 가짜 객체가 내부적…","fields":{"slug":"/testing/jestFn/"},"frontmatter":{"date":"December 02, 2019","title":"jest.fn()","category":"testing","draft":false}}},{"node":{"excerpt":"오늘 해야 할 일 underbar 과제 마무리 ‘비전공자 개발자 되기 - Marco’ 영상 보기✔  느낀점 ESLink와 Jest 설치를 하는데 시간이 굉장히 오래걸렸다. 제대로 설치가 된 것인지 긴가민가 해서 더 오래 걸렸던 것 같다. 다음에 또 설치하게 될때 헤매면 안되므로 다시한번 설치하는 시간을 가져야 겠다. 테스팅툴인 Jest가 아직은 익숙하지가…","fields":{"slug":"/til/20191202TIL/"},"frontmatter":{"date":"December 02, 2019","title":"2019-12-02","category":"til","draft":false}}},{"node":{"excerpt":"ESLint ‘no-undef’ Error jest 테스트 코드의 describe, test, expect에서 ‘no-undef’라는 오류가 발생해서\n‘jest eslint no-undef’라는 키워드로 구글링시도 위의 코드를 추가하니 해결되었다 ➡ 참고링크","fields":{"slug":"/etc/eSLintError/"},"frontmatter":{"date":"December 01, 2019","title":"ESLint 'no-undef' Error","category":"etc","draft":false}}},{"node":{"excerpt":"1. Node.js 설치하는 방법 < MacOS/Linux(ubuntu) > Install NVM   아래 명령어 터미널에 입력 버전이 잘 나오면 NVM 설치 성공! Install Node NVM을 사용하여 Node.js를 설치   아래 명령어와 같이 설치하고싶은 node version을 입력해준다 Node 버전이 확인된다면 Node 설치 성공! < Wi…","fields":{"slug":"/etc/nodejsTestingLinting/"},"frontmatter":{"date":"December 01, 2019","title":"Nodejs & Testing & Linting","category":"etc","draft":false}}},{"node":{"excerpt":"toEqual(value), toBe(value) toEqual : 원본배열이 아니어도 속성 값이 같으면 테스트 통과 toBe : 원본배열과 같은 주소를 참조하여야 테스트 통과 toBeTruthy(), toBeFalsy() toBeTruthy() ➡ 검증 대상이 true인 경우 테스트 통과 toBeFalsy() ➡ 검증 대상이 false인 경우 테스트 통…","fields":{"slug":"/testing/jestMatcher/"},"frontmatter":{"date":"December 01, 2019","title":"jest Matcher 함수","category":"testing","draft":false}}},{"node":{"excerpt":"오늘부터 아래와 같은 형식으로 TIL을 작성하려고 한다. 초보몽키님의 블로그를 보고 이런식으로 TIL을 진행하면 플래너처럼 사용할 수도 있어 너무 괜찮은 것 같다는 생각을 하여 바로 내 블로그에도 적용해 보았다. 오늘 해야 할 일 Flex 02 Students -> codestates immersive Course ‘Immersive Sprint 둘러보기…","fields":{"slug":"/til/20191126TIL/"},"frontmatter":{"date":"November 26, 2019","title":"2019-11-26","category":"til","draft":false}}},{"node":{"excerpt":"Class 문법으로 상속 extends 키워드 : 부모 클래스(base class)를 상속받는 자식 클래스(sub class)를 정의할 때 사용한다. super 키워드 : super 키워드는 부모 클래스를 참조(Reference)할 때 또는 부모 클래스의 constructor를 호출할 때 사용한다. super가 메소드로 사용될 때 super 메소드는 자식…","fields":{"slug":"/javascript/class/"},"frontmatter":{"date":"November 24, 2019","title":"class","category":"javascript","draft":false}}},{"node":{"excerpt":"객체 지향 프로그래밍 각각의 인스턴스는 해당 클래스의 고유한 속성과 메소드를 갖는다 클래스에 속성과 메소드를 정의하고, 인스턴스에서 이용한다. 배열을 정의하는 것은 Array의 인스턴스를 만들어내는 것과 동일하다","fields":{"slug":"/javascript/oop/"},"frontmatter":{"date":"November 24, 2019","title":"oop","category":"javascript","draft":false}}},{"node":{"excerpt":"Recursion Recursion은 Function이 스스로를 내부에서 부르게 하여 문제를 해결하는 기술이다. 이렇게 하면 소량의 처리만 완료하고 나머지 문제를 재귀 호출에 위임할 수 있다. 함수를 스스로 호출하는 것 재귀는 반복할 구문을 함수 단위로 분리해, 특정 조건이 만족할 때 까지 실행하는 패턴으로 볼 수 있습니다. 재귀는 무한 반복을 방지하기 …","fields":{"slug":"/javascript/recursion/"},"frontmatter":{"date":"November 21, 2019","title":"recursion","category":"javascript","draft":false}}},{"node":{"excerpt":"execution context https://user-images.githubusercontent.com/53102889/67153755-02a42a80-f32a-11e9-9ade-60c829cffaee.png 어떤 함수가 호출되면, 실행 컨텍스트(execution context)가 만들어진다. call stack에 push 함수를 벗어나면 call s…","fields":{"slug":"/javascript/this/"},"frontmatter":{"date":"November 21, 2019","title":"This","category":"javascript","draft":false}}},{"node":{"excerpt":"클로저 : 외부 함수의 변수에 접근할 수 있는 내부 함수 클로저 함수 안에서는 아래의 3가지에 모두 접근 가능합니다 지역 변수(innerVar) 외부 함수의 변수(outerVar) 전역 변수(globalVar) 유용한 클로저 예제 커링 함수 하나가 n개의 인자를 받는 대신, n개의 함수를 만들어 각각 인자를 받게 하는 방법 템플릿 함수 외부 함수의 변수가…","fields":{"slug":"/javascript/closure/"},"frontmatter":{"date":"November 21, 2019","title":"closure","category":"javascript","draft":false}}},{"node":{"excerpt":"Scope : 변수 접근 규칙에 따른 유효 범위 변수는 어떠한 환경 내에서만 사용 가능하며, 프로그래밍 언어는 각각의 변수 접근규칙을 갖고 있다 변수와 그 값이, 어디서부터 어디까지 유효한지를 판단하는 범위 JavaScript는 기본적으로, 함수가 선언되는(lexical) 동시에 자신만의 Scope를 가진다 Rule 1 : Local Scope VS Gl…","fields":{"slug":"/javascript/scope/"},"frontmatter":{"date":"November 21, 2019","title":"scope","category":"javascript","draft":false}}},{"node":{"excerpt":"알고리즘은 어떠한 문제를 해결하기 위한 절차를 만들어 내는 과정, 혹은 형태이다. 문제를 찾로 큰 문제를 잘게 분해한다 절차를 추론한다 반복되는 패턴을 찾는다 문제를 풀기 전에, 과정을 하나하나 pseudocode (의사코드)로 적어낼 수 있다. 프로그램의 절차 하나하나를 우리가 실제로 사용하는 일반적인 언어을 이용해서 작성하는 방법 이는 실제로 컴퓨터가…","fields":{"slug":"/algorithm/pseudocode/"},"frontmatter":{"date":"November 20, 2019","title":"알고리즘 문제를 어떻게 풀어나갈까?","category":"algorithm","draft":false}}},{"node":{"excerpt":"매개변수 Rest Parameter 정해지지 않은 갯수의 인수를 배열로 나타낼 수 있게 합니다. Spread 연산자 (Spread Operator) 연산자의 대상 배열 또는 이터러블(iterable)을  요소로 분리한다. arguments arguments 객체를 통해 인자값을 확인 유사 배열 객체 간단하게 순회가능한(iterable) 특징이 있고 len…","fields":{"slug":"/javascript/parameters/"},"frontmatter":{"date":"November 20, 2019","title":"매개변수","category":"javascript","draft":false}}},{"node":{"excerpt":"JavaScript에서의 Primitive Types & Reference Types JavaScript에서 변수의 전달 방법인 pass-by-value, 그리고 또다른 방법인 pass-by-reference에 대한 설명이다. JavaScript에는 두가지 종류의 변수 타입이 있다 primitive reference 변수가 생성되고 난 후, 고정된 크기의…","fields":{"slug":"/javascript/passing_variables/"},"frontmatter":{"date":"November 20, 2019","title":"변수의 전달","category":"javascript","draft":false}}},{"node":{"excerpt":"HTTP란? 클라이언트와 서버가 통신하기 위해서 HTTP라고 하는 규약 혹은 규칙을 지켜서 통신을 한다. HTTP(Hypertext Transfer Protocol) Protocol ? 상호 간에 정의한 규칙을 의미한다.(규약, 규칙) 웹에서는 브라우저와 서버 간에 데이터를 주고받기 위한 방식으로 HTTP 프로토콜을 사용하고 이다. 프런트엔드 개발자라면 …","fields":{"slug":"/web/http/"},"frontmatter":{"date":"November 15, 2019","title":"HTTP란","category":"web","draft":false}}},{"node":{"excerpt":"공통헤더 요청과 응답에 모두 사용되는 헤더이다. Date HTTP 메시지가 만들어진 시각. 자동으로 만들어진다. image.png Content-Length 요청과 응답 메시지의 본문 크기를 바이트 단위로 표시해준다. 메시지 크기에 따라 자동으로 만들어진다. image.png Content-Type Content-Type: text/html; charse…","fields":{"slug":"/web/httpHeader/"},"frontmatter":{"date":"November 15, 2019","title":"HTTP 공통 & 요청 헤더","category":"web","draft":false}}},{"node":{"excerpt":"HTTP Request message image.png image.png GET /1. html HTTP/1.1 GET : 웹브라우저와 웹서버가 어떤방식으로 통신할 것인가? /1. html : 우리가 웹서버에 요청하는 정보가 무엇인가? HTTP/1.1 : 웹브라우저가 현재 사용하고 있는(사용 할 수 있는) HTTP의 버전이 1.1이다 Host: local…","fields":{"slug":"/web/httpRequestMessage/"},"frontmatter":{"date":"November 15, 2019","title":"HTTP Request message","category":"web","draft":false}}},{"node":{"excerpt":"프로토타입 상속 https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Inheritance \n위의 reference, mdn에서 inheritance를 구현하는 방식을 알아보았다. Teacher() 생성자는 Person()의 메소드를 상속받지 못한 상태이다.  그래서 아래와 같은 코드를 추가해준다…","fields":{"slug":"/etc/prototypeInheritance/"},"frontmatter":{"date":"October 21, 2019","title":"[Help Desk] 프로토타입 상속 관련 문제","category":"web","draft":false}}},{"node":{"excerpt":"프로토타입 상속 https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Inheritance \n위의 reference, mdn에서 inheritance를 구현하는 방식을 알아보았다. Teacher() 생성자는 Person()의 메소드를 상속받지 못한 상태이다.  그래서 아래와 같은 코드를 추가해준다…","fields":{"slug":"/javascript/prototypeInheritance/"},"frontmatter":{"date":"October 21, 2019","title":"[Help Desk] 프로토타입 상속 관련 문제","category":"javascript","draft":false}}},{"node":{"excerpt":"오늘 내 질문글에 친절하게 답변을 해주신 개발자님 덕분에 reduce 함수에 대해 흐지부지하게 알고있던 부분에 대해 다시한번 되짚어보는 좋은 시간을 가지게 되었다. 위의 데이터를 참고하여,\nproducts0 이럭식의 코드를 reduce로 표현해 보고 싶어 아래와 같이 코드를 짜보았다. 그런데..!\n” Cannot read property ‘ingredie…","fields":{"slug":"/javascript/reduceFunction/"},"frontmatter":{"date":"October 21, 2019","title":"[Help Desk] reduce 함수 관련 문제","category":"javascript","draft":false}}},{"node":{"excerpt":"오늘 한 일 data structure reference 한번 더 보기(Queue, Stack) 증감 연산자(++) / 접미사, 점두사 recursion에 대해 좀 더 알아보기 내일 할 일 data structure reference 한번 더 보기 Linked List : Double Linked list, Circular Linked list, 가비지 …","fields":{"slug":"/til/20200113TIL/"},"frontmatter":{"date":"January 13, 2019","title":"2020-01-13","category":"til","draft":false}}}]}},"pageContext":{}},"staticQueryHashes":["2486386679","3128451518"]}