{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/CORS/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"942dbc55-7feb-5e05-af88-8666b3c16290","excerpt":"CORS - Cross Origin Resource Sharing cross origin에서 리소스(서버자원)을 요청하여 사용한다.\n다른서버에 있는 리소스 자원을 요청해 사용하기 위해 필요하다. MDN\nCross-Origin Resource Sharing (CORS) 은 추가 HTTP…","html":"<h1 id=\"cors---cross-origin-resource-sharing\" style=\"position:relative;\"><a href=\"#cors---cross-origin-resource-sharing\" aria-label=\"cors   cross origin resource sharing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS - Cross Origin Resource Sharing</h1>\n<p>cross origin에서 리소스(서버자원)을 요청하여 사용한다.\n다른서버에 있는 리소스 자원을 요청해 사용하기 위해 필요하다.</p>\n<blockquote>\n<p>MDN\nCross-Origin Resource Sharing (CORS) 은 추가 HTTP 헤더를 사용하여 브라우저에게 한 출처에서 실행중인 웹 응용 프로그램의 다른 출처의 선택된 자원에 대한 접근 권한을 알려주는 메커니즘입니다. 웹 응용 프로그램은 자신과 다른 출처 (도메인, 프로토콜 또는 포트)를 가진 리소스를 요청할 때 cross-origin HTTP 요청을 실행합니다.</p>\n</blockquote>\n<ul>\n<li>cors란 도메인 또는 포트가 다른 서버의 자원을 요청하면 발생하는 이슈이다.</li>\n<li>웹 상에서 어떤 리소스에 대한 접근을 허용 혹은 거부하는 메커니즘을 CORS (Cross-Origin-Resource-Sharing) 이라고 부른다.</li>\n</ul>\n<p>예전에는 서버에서 클라이언트라는 파일을 가지고 있고 유저가 서버에 요청을하면 서버에 있던 클라이언트를 유저가 받아가서 그 클라이언트에서 서버와 통신하거나 클라이언트에 스태틱하게 담겨져있던 데이터를 유저가 일방적으로 보는 방식으로 진행이 되었기때문에 서버에서 내려준 클라이언트는 서버에 위해가 되는 행동을 하지 않을 것이기때문에 의심의 여지가 없었다. 오리진이 같기 때문에 서버가 클라이언트의 요청을 막을 필요가 없었다.  </p>\n<p>최근에 들어서 싱글페이지 어플리케이션이라는 기술이 등장했고,<br>\n웹 애플리케이션이 점점더 고도화 되면서 이제는 우리 서버에만 요청하는 것이 아니라 우리가 만든 어플리케이션에서 유투브, 슬랙, Github 등등의 API를 활용하여 다른 서버에 있는 리소스를 필요로하게 되는 복잡한 웹 애플리케이션이 많아지게 되었다.  </p>\n<p>다른 서버로 리소스를 요청하는 것을 Cross Origin 요청이라고 한다.  </p>\n<blockquote>\n<p>보안상의 이유로 브라우저들은 스크립트 내에서 초기화되는 Cross Origin HTTP 요청을 제한한다.  </p>\n</blockquote>\n<p>브라우저에서 크로스 도메인 요청은 기본적으로 제한 되어있다. 만약 요청을 열어 놓으면 우리 서버에 어떤 요청을 할지, 서버에 어떤 리소스를 생성할지를 확인할수 없기때문에 보안상의 이유로 제한되어있는 것이다.  </p>\n<p>웹 애플리케이션 고도화를 위해 개발자들은</p>\n<ol>\n<li>cross-domain 요청을 할 수 있도록 요청</li>\n<li>서버가 Allow한 범위내에서 cross origin 요청 허용</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> defaultCorsHeaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 모든 도메인(*)을 허용한다.</span>\n  <span class=\"token string\">'access-control-allow-origin'</span><span class=\"token operator\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> \n  \n  <span class=\"token comment\">// 메소드는 GET POST PUT DELETE OPTIONS만 허용 한다.</span>\n  <span class=\"token string\">'access-control-allow-methods'</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET, POST, PUT, DELETE, OPTIONS'</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token comment\">// 헤더에는 content-type과 accept만 쓸 수 있다.</span>\n  <span class=\"token string\">'access-control-allow-headers'</span><span class=\"token operator\">:</span> <span class=\"token string\">'content-type, accept'</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token comment\">// preflight request는 10초 까지 허용 된다.</span>\n  <span class=\"token string\">'access-control-max-age'</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\">// Seconds.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h2>\n<p>서버에서 Allow 하는 조건들을 다 맞추고 있는가? => 사전에 서버에 확인 하는 요청</p>\n<h3 id=\"preflight사전전달-request\" style=\"position:relative;\"><a href=\"#preflight%EC%82%AC%EC%A0%84%EC%A0%84%EB%8B%AC-request\" aria-label=\"preflight사전전달 request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>preflight(사전전달) request</h3>\n<ol>\n<li>HTTP OPTIONS 요청 메서드를 이용해 서버로부터 지원 중인 메서드들을 내려 받는다.</li>\n<li>서버에서 “approval”(승인) 시에 실제 HTTP 요청 메서드를 이용해 실제 요청을 전송한다.</li>\n</ol>\n<p>ex)    </p>\n<ol>\n<li>post요청을 하기전 브라우저가 사전에 서버에게 이러이런한 방식으로 post요청을 할건데 이것을 너네 서버가 허용하고 있니? 라고 물어본다.</li>\n<li>서버가 허용한다고 응답을 하면</li>\n<li>실제로 클라이언트에 설정해두었던 post요청을 서버로 보내서 리소스를 생성한다.</li>\n</ol>\n<h2 id=\"mdn-문서-참고\" style=\"position:relative;\"><a href=\"#mdn-%EB%AC%B8%EC%84%9C-%EC%B0%B8%EA%B3%A0\" aria-label=\"mdn 문서 참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MDN 문서 참고</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Access_control_CORS\">CORS</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Methods/OPTIONS\">OPTIONS</a></li>\n</ul>\n<h2 id=\"참고블로그\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%B8%94%EB%A1%9C%EA%B7%B8\" aria-label=\"참고블로그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고블로그</h2>\n<ul>\n<li><a href=\"https://velog.io/@leejh3224/CORS-Real-examples-8yjnloovl5\">CORS: Real examples</a></li>\n<li><a href=\"https://blog.kjwon15.net/2018/12/16/cors/\">CORS는 대체 뭐 하는 놈일까?</a></li>\n</ul>","frontmatter":{"title":"CORS","date":"February 02, 2020"}}},"pageContext":{"slug":"/javascript/CORS/","previous":{"fields":{"slug":"/javascript/NodeJSExpressBasic/"},"frontmatter":{"title":"express framework - 1(feat. NODE_ENV)","category":"javascript","draft":false}},"next":{"fields":{"slug":"/javascript/expressSendJsonMethod/"},"frontmatter":{"title":"[Express 프레임워크] send메소드와 end메소드의 차이점&작동방식","category":"javascript","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}