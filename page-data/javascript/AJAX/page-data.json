{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/AJAX/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"44c459c6-7251-5cc5-b0b3-9b1ea7786d08","excerpt":"브라우저에서 웹페이지를 요청하거나 링크를 클릭하면 화면 갱신이 발생한다. 이것은 브라우저와 서버와의 통신에 의한 것이다. image.png\n[이미지 출처 : poiemaweb] 01. 웹페이지 렌더링 image.png\n[이미지 출처 : poiemaweb]   서버는 요청받은 페이지(HTML)를 반환하는데 이때 HTML에서 로드하는 CSS나 JavaScript…","html":"<p>브라우저에서 웹페이지를 요청하거나 링크를 클릭하면 화면 갱신이 발생한다. 이것은 브라우저와 서버와의 통신에 의한 것이다.</p>\n<p><img src=\"https://images.velog.io/post-images/yhe228/62d7d540-398f-11ea-8b09-316bd25893aa/image.png\" alt=\"image.png\">\n[이미지 출처 : <a href=\"https://poiemaweb.com/js-ajax\">poiemaweb</a>]</p>\n<h2 id=\"01-웹페이지-렌더링\" style=\"position:relative;\"><a href=\"#01-%EC%9B%B9%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"01 웹페이지 렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. 웹페이지 렌더링</h2>\n<p><img src=\"https://images.velog.io/post-images/yhe228/45fa3200-3990-11ea-b669-67ea9e26ebdf/image.png\" alt=\"image.png\">\n[이미지 출처 : <a href=\"https://poiemaweb.com/js-ajax\">poiemaweb</a>]  </p>\n<ol>\n<li>서버는 요청받은 페이지(HTML)를 반환하는데 이때 HTML에서 로드하는 CSS나 JavaScript 파일들도 같이 반환된다.</li>\n<li>클라이언트의 요청에 따라 서버는 정적인 파일을 반환할 수도 있고 서버 사이드 프로그램이 만들어낸 파일이나 데이터를 반환할 수도 있다.</li>\n<li>서버로부터 웹페이지가 반환되면 클라이언트(브라우저)는 이를 렌더링하여 화면에 표시한다.  </li>\n</ol>\n<h2 id=\"02-ajax-\" style=\"position:relative;\"><a href=\"#02-ajax-\" aria-label=\"02 ajax  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02. Ajax ?</h2>\n<ul>\n<li>페이지 전체를 렌더하지 않고 필요한 부분만 부분적으로 업데이트하기 위해 필요하다.</li>\n<li>자바스크립트를 이용해서 비동기적(Asynchronous)으로 서버와 브라우저가 데이터를 교환할 수 있는 통신 방식을 의미한다.</li>\n</ul>\n<h3 id=\"02-1-dynamic-web-page\" style=\"position:relative;\"><a href=\"#02-1-dynamic-web-page\" aria-label=\"02 1 dynamic web page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02-1. dynamic web page</h3>\n<p>단순한 web page가 아닌, 보다 애플리케이션다운, <strong>web appp</strong>의 등장</p>\n<ol>\n<li>\n<p>서버와 자유롭게 통신할 수 있다.</p>\n<ul>\n<li>서버와 자유롭게 통신을 해서 데이터를 받아오는 XMLHttpRequest(XHR)의 등장 </li>\n</ul>\n</li>\n<li>\n<p>페이지 깜빡임 없이 seamless하게 작동한다.</p>\n<ul>\n<li>페이지를 새로 받아와서 렌더링 하는것이 아니라 필요한 부분만 변경하기를 원한다.</li>\n<li>JavaScript를 이용해서 DOM을 건드리는 방식을 사용한다.</li>\n</ul>\n</li>\n</ol>\n<p>위의 1,2번을 합쳐서 AJAX(Asynchronous JavaScript and XML)라고 한다.  </p>\n<h2 id=\"03-ajax의-특징\" style=\"position:relative;\"><a href=\"#03-ajax%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"03 ajax의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03. Ajax의 특징</h2>\n<p><img src=\"https://images.velog.io/post-images/yhe228/2fa3a8b0-3990-11ea-88d5-a5a384879d74/image.png\" alt=\"image.png\"><br>\n[이미지 출처 : <a href=\"https://poiemaweb.com/js-ajax\">poiemaweb</a>]  </p>\n<ul>\n<li>서버로부터 웹페이지가 반환되면 화면 전체를 갱신해야 하는데 페이지 일부만을 갱신하고도 동일한 효과를 볼 수 있다.</li>\n<li>페이지 전체를 로드하여 렌더링할 필요가 없고 갱신이 필요한 일부만 로드하여 갱신하면 되므로 빠른 퍼포먼스와 부드러운 화면 표시 효과를 기대할 수 있다.</li>\n</ul>\n<h2 id=\"fetch-사용\" style=\"position:relative;\"><a href=\"#fetch-%EC%82%AC%EC%9A%A9\" aria-label=\"fetch 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fetch 사용</h2>\n<p>서버에서 자원을 가져오기위해 fetch를 사용한다.</p>\n<h3 id=\"-서버에서-자원을-가져오는-여러-방법중-fetch를-사용하는-이유\" style=\"position:relative;\"><a href=\"#-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-%EC%9E%90%EC%9B%90%EC%9D%84-%EA%B0%80%EC%A0%B8%EC%98%A4%EB%8A%94-%EC%97%AC%EB%9F%AC-%EB%B0%A9%EB%B2%95%EC%A4%91-fetch%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\" 서버에서 자원을 가져오는 여러 방법중 fetch를 사용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 서버에서 자원을 가져오는 여러 방법중 fetch를 사용하는 이유</h3>\n<ol>\n<li>\n<p>XMLHttpRequest : 요즘도 많이 쓰고있는 기술이지만, 복잡하다.(콜백방식)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">reqListener</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    oReq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> reqListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    oReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://www.example.org/example.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    oReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>jQuery ajax : 복잡하고, 가동성이 좋지 않다(체이닝 방식)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\t$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      url<span class=\"token operator\">:</span> <span class=\"token string\">'http://example.com'</span><span class=\"token punctuation\">,</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n      dataType<span class=\"token operator\">:</span> <span class=\"token string\">'json'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">xhr<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> errorThrown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">always</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">xhr<span class=\"token punctuation\">,</span> status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'요청완료'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>fetch</li>\n<li>Fetch API는 네트워크 통신을 포함한 리소스 취득을 위한 인터페이스가 정의되어 있다.</li>\n<li>XMLHttpRequest와 비슷한 역할을 하지만 좀더 강력하고 유연한 조작이 가능한 API이다.</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">mdn링크</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 서버의 주소</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// json을 javascript object로 바꿔주는 코드</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// error가 catch될 수 있는 함수</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\t\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>","frontmatter":{"title":"AJAX?","date":"January 18, 2020"}}},"pageContext":{"slug":"/javascript/AJAX/","previous":{"fields":{"slug":"/javascript/API/"},"frontmatter":{"title":"API란?","category":"javascript","draft":false}},"next":{"fields":{"slug":"/javascript/EventLoop/"},"frontmatter":{"title":"Event Loop?","category":"javascript","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}