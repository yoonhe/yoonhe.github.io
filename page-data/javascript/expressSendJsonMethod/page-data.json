{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/expressSendJsonMethod/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"9abc5b96-1254-50f2-ad66-1467fd16883b","excerpt":"❓ 내가 궁금했던점 ❓ 아래의 코드를 보고, fetch에서  요청을 하게되면 서버에서 데이터를 문자열로 주기때문에 를  통해 자바스크립트 오브젝트로 바꿔준다고 이해했다. 아래와같이  사용시에는 를   를 통해 문자열로 바꿔서 응답을 해주고  사용시에는  를 통해 응답을 해주는데  안에 http 모듈에서 object를 문자열로 바꿔주기위해 사용했던  와 같은 기능이 포함되어있는지가 궁금했다. Express res.json과 res.send…","html":"<h2 id=\"-내가-궁금했던점-\" style=\"position:relative;\"><a href=\"#-%EB%82%B4%EA%B0%80-%EA%B6%81%EA%B8%88%ED%96%88%EB%8D%98%EC%A0%90-\" aria-label=\" 내가 궁금했던점  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❓ 내가 궁금했던점 ❓</h2>\n<p>아래의 코드를 보고,</p>\n<p>fetch에서 <code class=\"language-text\">get</code> 요청을 하게되면 서버에서 데이터를 문자열로 주기때문에 <code class=\"language-text\">resp.json()</code>를  통해 자바스크립트 오브젝트로 바꿔준다고 이해했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function-variable function\">fetch</span><span class=\"token operator\">:</span> <span class=\"token parameter\">callback</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            window\n              <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>아래와같이 <code class=\"language-text\">http 모듈</code> 사용시에는 <code class=\"language-text\">messages</code>를  <code class=\"language-text\">JSON.stringify(messages)</code> 를 통해 문자열로 바꿔서 응답을 해주고</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      results<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          username<span class=\"token operator\">:</span> <span class=\"token string\">\"Jono\"</span><span class=\"token punctuation\">,</span>\n          text<span class=\"token operator\">:</span> <span class=\"token string\">\"Do my bidding!\"</span><span class=\"token punctuation\">,</span>\n          roomname<span class=\"token operator\">:</span> <span class=\"token string\">\"코드스테이츠\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">===</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url <span class=\"token operator\">===</span> <span class=\"token string\">\"/classes/messages\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t\t\t<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// get 요청 시 results 객체를 클라이언트에 stringify 후 전달합니다.</span>\n    \t\t\tresponse<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    \t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n    \t\t\tresponse<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span> defaultCorsHeaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\t\tresponse<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">express framework</code> 사용시에는 <code class=\"language-text\">send(messages)</code> 를 통해 응답을 해주는데 <code class=\"language-text\">send(messages)</code> 안에 http 모듈에서 object를 문자열로 바꿔주기위해 사용했던 <code class=\"language-text\">JSON.stringify(messages)</code> 와 같은 기능이 포함되어있는지가 궁금했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      results<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          username<span class=\"token operator\">:</span> <span class=\"token string\">\"Jono\"</span><span class=\"token punctuation\">,</span>\n          text<span class=\"token operator\">:</span> <span class=\"token string\">\"Do my bidding!\"</span><span class=\"token punctuation\">,</span>\n          roomname<span class=\"token operator\">:</span> <span class=\"token string\">\"코드스테이츠\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/classes/messages\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://haeguri.github.io/2018/12/30/compare-response-json-send-func/\">Express res.json과 res.send 비교</a>글을 통해 나의 궁금점을 해결할 수 있었다.</p>\n<h3 id=\"code-classlanguage-textresjsoncode-소스코드-분석\" style=\"position:relative;\"><a href=\"#code-classlanguage-textresjsoncode-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\" aria-label=\"code classlanguage textresjsoncode 소스코드 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">res.json</code> 소스코드 분석</h3>\n<p><code class=\"language-text\">res.json</code>은 내부적으로 <code class=\"language-text\">res.send</code> 를 호출하고 있었다는 사실을 알게되었다..!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    res<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">json</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> val <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n    \n      <span class=\"token comment\">// 생략...</span>\n    \n      <span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> escape <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json escape'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">var</span> replacer <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json replacer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> spaces <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json spaces'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> body <span class=\"token operator\">=</span> <span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> replacer<span class=\"token punctuation\">,</span> spaces<span class=\"token punctuation\">,</span> escape<span class=\"token punctuation\">)</span>\n    \n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    \n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">res.json</code>의 인자로 obj를 받는다</li>\n<li>obj는 <code class=\"language-text\">stringify</code>를 통해 JSON 문자열로 변환된다</li>\n<li>변환된 <code class=\"language-text\">obj</code>는 <code class=\"language-text\">body</code>에  할당된다</li>\n<li><code class=\"language-text\">Content-Type</code> 헤더가 세팅되지 않았을 경우 <code class=\"language-text\">this(res 객체)</code> 에 <code class=\"language-text\">Content-Type</code> 으로 <code class=\"language-text\">application/json</code>을 세팅한다.</li>\n<li><code class=\"language-text\">res.send(body)</code> 를 실행하여 결과값을 반환한다.</li>\n</ol>\n<h3 id=\"code-classlanguage-textressendcode-소스코드-분석\" style=\"position:relative;\"><a href=\"#code-classlanguage-textressendcode-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\" aria-label=\"code classlanguage textressendcode 소스코드 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">res.send</code> 소스코드 분석</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    res<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">send</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">body</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> chunk <span class=\"token operator\">=</span> body<span class=\"token punctuation\">;</span>\n    \n        <span class=\"token comment\">// 생략....</span>\n    \n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// string defaulting to html</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'string'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'boolean'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'number'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'object'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chunk <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    chunk <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">isBuffer</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    \n        <span class=\"token comment\">// 생략..</span>\n    \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">res.send</code> 함수의 인자로 <code class=\"language-text\">body</code>를 받는다</li>\n<li><code class=\"language-text\">body</code> 는 바로 <code class=\"language-text\">chuck</code>에  할당된다</li>\n<li>\n<p>switch문을 통해 <code class=\"language-text\">chunk</code> 에 대한 타입검사가 진행된다.</p>\n<ol>\n<li><code class=\"language-text\">chunk</code>가 <code class=\"language-text\">object</code>타입이면 <code class=\"language-text\">res.json</code>을 호출한다.</li>\n</ol>\n</li>\n</ol>\n<p>3-1. 여기서 의문, 계속해서 서로를 호출하면 스택이 넘쳐버리지 않을까??</p>\n<ol>\n<li>\n<p>res.send(object)로 코드를 실행했을 때 함수의 실행 순서</p>\n<ol>\n<li>res.send(object)</li>\n<li>res.json(object)</li>\n<li>res.send(string)</li>\n</ol>\n</li>\n<li><code class=\"language-text\">res.send</code>의 인자의 타입이 <code class=\"language-text\">object</code>일때 <code class=\"language-text\">res.json</code> 을 호출하면 <code class=\"language-text\">res.json</code> 에서 문자열로 바꿔서 다시 <code class=\"language-text\">res.send</code> 의 인자로 넣고 호출하게 되는데 <code class=\"language-text\">res.send</code>에서 인자가 <code class=\"language-text\">string</code> 일 경우에는 <code class=\"language-text\">object</code> 일 때와 다른 분기를 타게되서 <code class=\"language-text\">res.json</code> 을 호출하지 않는다. 그렇기때문에 스택이 넘칠일은 없다..!</li>\n</ol>\n<h3 id=\"참고-블로그\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8\" aria-label=\"참고 블로그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 블로그</h3>\n<ul>\n<li><a href=\"https://haeguri.github.io/2018/12/30/compare-response-json-send-func/\">Express res.json과 res.send 비교</a></li>\n</ul>","frontmatter":{"title":"[Express 프레임워크] send메소드와 end메소드의 차이점&작동방식","date":"February 11, 2020"}}},"pageContext":{"slug":"/javascript/expressSendJsonMethod/","previous":{"fields":{"slug":"/javascript/CORS/"},"frontmatter":{"title":"CORS","category":"javascript","draft":false}},"next":{"fields":{"slug":"/javascript/resSendFileANDpathJoin/"},"frontmatter":{"title":"res.sendFile & path.join","category":"javascript","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}