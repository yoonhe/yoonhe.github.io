{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/iife/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"7a295bbc-6b49-5587-a708-9504604e2994","excerpt":"즉시실행함수() 위와같은 것을 즉시 실행 함수 표현(IIFE, Immediately Invoked Function Expression…","html":"<h2 id=\"즉시실행함수code-classlanguage-textiifecode\" style=\"position:relative;\"><a href=\"#%EC%A6%89%EC%8B%9C%EC%8B%A4%ED%96%89%ED%95%A8%EC%88%98code-classlanguage-textiifecode\" aria-label=\"즉시실행함수code classlanguage textiifecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>즉시실행함수(<code class=\"language-text\">IIFE</code>)</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'heaeun'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello heaeun</span></code></pre></div>\n<p>위와같은 것을 즉시 실행 함수 표현(IIFE, Immediately Invoked Function Expression)이라고 하며, 함수를 정의함과 동시에 실행합니다</p>\n<h3 id=\"사용방법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용방법</h3>\n<p>즉시 실행 함수는 반드시 그룹 연산자 <code class=\"language-text\">( ... )</code> 로 감싸야 합니다.</p>\n<p>만약 아래처럼 그룹 연산자로 감싸지 않고 실행하면 에러가 발생합니다</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">'heaeun'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>에러 발생 !</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">Uncaught SyntaxError<span class=\"token operator\">:</span> Unexpected token <span class=\"token string\">'('</span></code></pre></div>\n<p>👉🏻 에러가 발생하는 이유 ? (자바스크립트 딥다이브 <code class=\"language-text\">12.7</code> 참고)</p>\n<p>함수 선언문 뒤의 <code class=\"language-text\">(...)</code> 는 함수 호출 연산자가 아니라 <code class=\"language-text\">그룹 연산자</code>로 해석되기 때문입니다.</p>\n<p>👉🏻 그룹 연산자로 함수 선언문을 감싸는 이유?</p>\n<ul>\n<li>그룹 연산자의 피연산자는 값으로 평가됩니다</li>\n<li>그룹 연산자로 함수를 묶어주면 함수 리터럴을 평가해서 함수 객체를 생성할 수 있습니다.</li>\n<li>함수객체 뒤의 <code class=\"language-text\">()</code>는 함수 호출 연산자로 해석됩니다</li>\n</ul>\n<h3 id=\"-어떠한-문제를-해결하나요\" style=\"position:relative;\"><a href=\"#-%EC%96%B4%EB%96%A0%ED%95%9C-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%82%98%EC%9A%94\" aria-label=\" 어떠한 문제를 해결하나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 어떠한 문제를 해결하나요?</h3>\n<ul>\n<li>전역 네임스페이스의 오염을 막아줍니다</li>\n<li>자바스크립트의 특성상 변수의 스코프는 해당 변수를 감싸고 있는 함수 블럭으로 제한되는데, 이러한 특징을 사용해 변수 혹은 함수의 전역화를 최소화 시킬 수 있습니다</li>\n<li><code class=\"language-text\">IIFE</code>로 모든 코드를 감싸면 <code class=\"language-text\">IIFE</code> 안에 있는 모든 변수는 <code class=\"language-text\">IIFE</code>의 지역 변수가 됩니다. 이러한 특성을 이용해 전역변수의 사용을 제한할 수 있습니다</li>\n</ul>\n<h3 id=\"-즉시-실행-함수를-어떠한-경우에-사용하나요\" style=\"position:relative;\"><a href=\"#-%EC%A6%89%EC%8B%9C-%EC%8B%A4%ED%96%89-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%96%B4%EB%96%A0%ED%95%9C-%EA%B2%BD%EC%9A%B0%EC%97%90-%EC%82%AC%EC%9A%A9%ED%95%98%EB%82%98%EC%9A%94\" aria-label=\" 즉시 실행 함수를 어떠한 경우에 사용하나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 즉시 실행 함수를 어떠한 경우에 사용하나요?</h3>\n<p>모듈패턴을 사용 하거나 스코프를 타이트하게 제한을 할 때 사용하던 문법입니다.</p>\n<h4 id=\"모듈-패턴\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88-%ED%8C%A8%ED%84%B4\" aria-label=\"모듈 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈 패턴</h4>\n<ul>\n<li>관련이 있는 변수와 함수를 <code class=\"language-text\">IIFE</code>로 감싸 하나의 모듈을 만드는 것</li>\n<li>클로저를 기반으로 동작한다</li>\n<li>전역 변수의 억제 구현 가능</li>\n<li>캡슐화 구현 가능</li>\n</ul>\n<h4 id=\"스코프\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"스코프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프</h4>\n<ul>\n<li>모든 식별자는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신의 참조할 수 있는 유효 범위가 결정됩니다</li>\n<li>식별자가 유효한 범위를 뜻합니다</li>\n<li>식별자를 검색할 때 사용하는 규칙</li>\n</ul>\n<p>최근에는 es6의 import 문법때문에 많이 사용되지는 않지만 async, await을 사용할때는 사용됩니다</p>\n<h4 id=\"async-await은-함수-안에서만-사용이-가능합니다\" style=\"position:relative;\"><a href=\"#async-await%EC%9D%80-%ED%95%A8%EC%88%98-%EC%95%88%EC%97%90%EC%84%9C%EB%A7%8C-%EC%82%AC%EC%9A%A9%EC%9D%B4-%EA%B0%80%EB%8A%A5%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"async await은 함수 안에서만 사용이 가능합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>async, await은 함수 안에서만 사용이 가능합니다</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'heaeun'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// promise를 반환하는 함수 앞에 await을 붙입니다.</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user ? '</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3초뒤에 heaeun이 찍힙니다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"es6-import-키워드\" style=\"position:relative;\"><a href=\"#es6-import-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"es6 import 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>es6 import 키워드</h4>\n<blockquote>\n<p>다른 모듈에서 공개한 식별자를 자신의 모듈 스코프 내부로 로드하려면 <code class=\"language-text\">import</code> 키워드를 사용합니다 (자바스크립트 딥다이브 참고 - <code class=\"language-text\">48.3.3</code>)</p>\n</blockquote>\n<h2 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h2>\n<p>즉시 실행 함수는 함수 블럭 단위로 지역 변수를 가지는 특성을 사용해 무분별한 전역 변수의 남발을 제한하는 하나의 방법이다</p>","frontmatter":{"title":"IIFE","date":"October 16, 2021"}}},"pageContext":{"slug":"/javascript/iife/","previous":{"fields":{"slug":"/javascript/생성자함수/"},"frontmatter":{"title":"생성자함수","category":"javascript","draft":false}},"next":{"fields":{"slug":"/javascript/new-연산자를-통해-함수를-호출했는지-확인하는-방법/"},"frontmatter":{"title":"new 연산자를 통해 함수를 호출했는지 확인하는 방법","category":"javascript","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}