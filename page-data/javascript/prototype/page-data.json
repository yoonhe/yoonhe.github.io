{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/prototype/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"dd007485-846c-55d8-b29b-6d03e5ac5a90","excerpt":"prototype 자바스크립트에는 Prototype Link 와 Prototype Object라는 것이 존재한다. 그리고 이 둘을 통틀어 Prototype이라고 부른다. 1. Prototype Object 객체는 언제나 함수(Function)로 생성된다 위와 같이 함수가 정의될 때 2가지 일이 동시에 일어난다..!   해당 함수에 Constructor(생성자) 자격 부여 Constructor 자격이 부여되면 new를 통해 객체를 만들어 낼 수 있게 된다. 이것이 함수만 new…","html":"<h2 id=\"prototype\" style=\"position:relative;\"><a href=\"#prototype\" aria-label=\"prototype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>prototype</h2>\n<p>자바스크립트에는 Prototype Link 와 Prototype Object라는 것이 존재한다. 그리고 이 둘을 통틀어 Prototype이라고 부른다.</p>\n<h3 id=\"1-prototype-object\" style=\"position:relative;\"><a href=\"#1-prototype-object\" aria-label=\"1 prototype object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Prototype Object</h3>\n<p>객체는 언제나 함수(Function)로 생성된다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Object, Array 등등은 자바스크립트에서 기본적으로 제공하는 함수이다.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ƒ Object() { [native code] }</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ƒ Array() { [native code] }</span>\n\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]</span></code></pre></div>\n<p>위와 같이 함수가 정의될 때 2가지 일이 동시에 일어난다..!  </p>\n<ol>\n<li>\n<p>해당 함수에 Constructor(생성자) 자격 부여</p>\n<ul>\n<li>Constructor 자격이 부여되면 new를 통해 객체를 만들어 낼 수 있게 된다. 이것이 함수만 new 키워드를 사용할 수 있는 이유이다.</li>\n</ul>\n</li>\n<li>\n<p>해당 함수의 Prototype Object 생성 및 연결</p>\n<p>👉 함수를 정의하면 함수만 생성되는 것이 아니라 Prototype Object도 같이 생성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Food</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Food</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'을 먹습니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/yhe228/9e5d1290-18ad-11ea-913b-9154d8e270a5/image.png\" alt=\"image.png\"></p>\n<ul>\n<li>생성된 함수는 <code class=\"language-text\">prototype</code>이라는 속성을 통해 <code class=\"language-text\">Prototype Object</code>에 접근할 수 있다. </li>\n<li><code class=\"language-text\">Prototype Object</code>는 일반적인 객체와 같으며 기본적인 속성으로 <code class=\"language-text\">constructor</code>와 <code class=\"language-text\">proto</code>를 가지고 있다.</li>\n<li><code class=\"language-text\">constructor</code>는 Prototype Object와 같이 생성되었던 함수를 가리킨다.</li>\n<li><code class=\"language-text\">proto</code>는 Prototype Link이다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-prototype-link\" style=\"position:relative;\"><a href=\"#2-prototype-link\" aria-label=\"2 prototype link permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Prototype Link</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> food1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Food</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfood1<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// apple을 먹습니다</span></code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/yhe228/e1bc8d50-18b1-11ea-960b-0991973d88dc/image.png\" alt=\"image.png\"></p>\n<ul>\n<li><code class=\"language-text\">__proto__</code>속성은 모든 객체가 빠짐없이 가지고 있는 속성이다.</li>\n<li><code class=\"language-text\">__proto__</code>는 <strong>객체가 생성될 때 조상이었던 함수의 Prototype Object를 가리킨다.</strong>(그래서 Prototype Object의 속성을 참조하는 것이 가능하다)</li>\n<li><code class=\"language-text\">food1</code>객체는 <code class=\"language-text\">Food</code> 함수로부터 생성되었으니 <code class=\"language-text\">Food</code> 함수의 <code class=\"language-text\">Prototype Object</code>를 가리키고 있는 것</li>\n<li><code class=\"language-text\">food1</code>객체가 <code class=\"language-text\">eat메소드</code>를 직접 가지고 있지 않기 때문에 <code class=\"language-text\">eat메소드</code>를 찾을 때 까지 상위 프로토타입을 탐색한다. 최상위인 Object의 Prototype Object까지 도달했는데도 못찾았을 경우 undefined를 리턴한다. 이렇게 <code class=\"language-text\">__proto__</code>속성을 통해 상위 프로토타입과 연결되어있는 형태를 <code class=\"language-text\">프로토타입 체인(Chain)</code>이라고 한다</li>\n</ul>","frontmatter":{"title":"Prototype","date":"December 07, 2019"}}},"pageContext":{"slug":"/javascript/prototype/","previous":{"fields":{"slug":"/javascript/oop2/"},"frontmatter":{"title":"oop2","category":"javascript","draft":false}},"next":{"fields":{"slug":"/algorithm/queueandstack/"},"frontmatter":{"title":"Queue & Stack","category":"algorithm","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}