{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/nodeJS/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"c28303da-7606-5830-a1c5-8c8ae4296f4c","excerpt":"Node.js Node.js는 Chrome V8 JavaScript 엔진으로 빌드된 Javascript 런타임이다. V8 JavaScript 엔진 자바스크립트를 기계어로 컴파일 해주는 역할 런타임 프로그래밍 언어가 구동되고 있는 환경 즉, Node.js는  자바스크립트를 기계어로 컴파일 해주는 엔진으로 빌드 되어있는, 자바스크립트가 구동중인 환경이다. 자바스크립트가 돌고있는 환경인데, Native machine…","html":"<h1 id=\"nodejs\" style=\"position:relative;\"><a href=\"#nodejs\" aria-label=\"nodejs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js</h1>\n<p>Node.js는 Chrome V8 JavaScript 엔진으로 빌드된 Javascript 런타임이다.</p>\n<ol>\n<li>\n<p>V8 JavaScript 엔진</p>\n<ul>\n<li>자바스크립트를 기계어로 컴파일 해주는 역할</li>\n</ul>\n</li>\n<li>\n<p>런타임</p>\n<ul>\n<li>프로그래밍 언어가 구동되고 있는 환경</li>\n</ul>\n</li>\n</ol>\n<p>즉, Node.js는 </p>\n<ul>\n<li>자바스크립트를 기계어로 컴파일 해주는 엔진으로 빌드 되어있는, 자바스크립트가 구동중인 환경이다.</li>\n<li>자바스크립트가 돌고있는 환경인데, Native machine이 이해할 수 있는 코드로 바꿔주는 역할을 한다.</li>\n<li>우리가 자바스크립트로 코드를 열심히 쓰면 컴퓨터가 알아들을 수 있게 해주는 역할을 한다.</li>\n</ul>\n<h2 id=\"이벤트-기반-및-논블로킹-io-모델\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EA%B8%B0%EB%B0%98-%EB%B0%8F-%EB%85%BC%EB%B8%94%EB%A1%9C%ED%82%B9-io-%EB%AA%A8%EB%8D%B8\" aria-label=\"이벤트 기반 및 논블로킹 io 모델 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 기반 및 논블로킹 I/O 모델</h2>\n<p>유저의 클릭이나 네트워크에 리소스를 요청하는 이벤트가 논블로킹으로 이루어지는 Input Output model</p>\n<ol>\n<li>\n<p>이벤트 </p>\n<ul>\n<li>유저의 버튼 클릭</li>\n<li>네트워크에 리소스를 요청 하는 것 등등</li>\n</ul>\n</li>\n<li>\n<p>논블로킹 I/O 모델</p>\n<ul>\n<li>블로킹 - 다음 함수의 실행이 현재 함수의 종료 이후에 이루어 지는 것(동기)</li>\n<li>논블로킹 - 다음 함수의 실행이 현재 함수의 종료를 기다리지 않음(비동기)</li>\n</ul>\n</li>\n<li>\n<p>I/O 모델</p>\n<ul>\n<li>Input을 주면 Output을 반환하는 모델 </li>\n<li>request를 했을때 response를 주는 모델</li>\n</ul>\n</li>\n</ol>\n<p>Node.js는 javascript를 컴파일하여 구동하고, 이벤트 기반의 non-blocking 모델로 속도가 빠르다.</p>\n<h2 id=\"node-core-modules\" style=\"position:relative;\"><a href=\"#node-core-modules\" aria-label=\"node core modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node core modules</h2>\n<p>별도의 설치를 하지 않아도 node상에서  쓸 수 있는 모듈이 있다.</p>\n<ul>\n<li>node와 함께 번들링 되어있는 모듈</li>\n<li>require(“)방식으로 사용할 수 있다</li>\n<li>\n<p>예시</p>\n<ul>\n<li>fs</li>\n<li>http</li>\n<li>url</li>\n<li>path</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// file system : 파일을 읽고 쓰고 지우는 역할을 할 수 있다.</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// http : get 요청, 서버 생성이 가능하다.</span>\n\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./something.json'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// readFile => 어떤 파일을 읽어서 error와 data를 콜백함수로 받는다.(비동기)</span>\n\n<span class=\"token comment\">// 추후 스프린트에서 callback과 promise, async, await와 같은 개념을 익히고 다시 코드를 보면서, 아래 2가지를 다시 고민해보자..!</span>\n<span class=\"token comment\">// 1. 왜 콜백으로 처리되어 있는지?</span>\n<span class=\"token comment\">// 2. 콜백이 아닌 다른 방식으로 처리할 수 있는 방법을 무엇일까?</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5000/api'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"npm-node-package-manager\" style=\"position:relative;\"><a href=\"#npm-node-package-manager\" aria-label=\"npm node package manager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NPM (Node Package Manager)</h2>\n<ul>\n<li>세계에서 가장 큰 오픈소스 라이브러리 생태계 중 하나</li>\n<li>노드와 함께 번들링 되어있는것이 아니다. 따로 설치를 해주어야 함.</li>\n</ul>\n<p>예를 들어, 기존에는 html파일의 head안에 <code class=\"language-text\">&lt;script src=&quot;jQuery 주소 경로&quot;&gt;&lt;/script&gt;</code> 이런식으로 자바스크립트 소스를 넣어주어야 스크립트에서 jQuery 사용이 가능했다면 이제는 NPM을 사용해 아래와 같이 사용할 수 있게 되었다.</p>\n<p><img src=\"https://images.velog.io/post-images/yhe228/60e80420-44bc-11ea-9528-73385e3decb8/Screenshot-from-2020-02-01-15-27-33.png\" alt=\"Screenshot from 2020-02-01 15-27-33.png\"></p>\n<h2 id=\"packagejson\" style=\"position:relative;\"><a href=\"#packagejson\" aria-label=\"packagejson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package.json</h2>\n<ul>\n<li>NPM을 활용하기 위한 정보들이 모여 있는 파일</li>\n<li>project 전반에 관한 정보가 들어있다</li>\n</ul>\n<p>일반적으로 노드모듈들은 git 상에서 제외가 되기 때문에, 노드모듈들이 오는 것이 아니고\npackage.json에 있는 dependency를 바탕으로 npm이 다시 설치하는 것이다.</p>\n<p>dependency에 등록 되어 있지않고 실제로 코드에서 사용이 되고 있다면?\n내가 사용한 모듈을 devdependency 혹은 dependency에 등록하지 않는다면?</p>\n<ol>\n<li>코드에서는 해당 모듈을 쓰고 있지만 npm install로는 설치 되지 않는다.</li>\n<li>다른 팀원이 내 코드를 다시 받았을때 코드가 실행되지 않을 것이고 팀 갈등이 생길 수 있다.</li>\n</ol>\n<p>팀원간에 갈등이 발생되지 않도록 반드시 자기가 사용한 모듈을 등록하자..!!!</p>\n<h2 id=\"scripts-사용법\" style=\"position:relative;\"><a href=\"#scripts-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"scripts 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>scripts 사용법</h2>\n<p>일단 npm test를 위해 폴더를 먼저 만들고 설정을 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">mkdir npm<span class=\"token operator\">-</span>init<span class=\"token operator\">-</span>test <span class=\"token comment\">// npm 프로젝트 폴더 생성</span>\ncode npm<span class=\"token operator\">-</span>init<span class=\"token operator\">-</span>test <span class=\"token comment\">// VScode로 오픈</span>\n\n\nnpm init <span class=\"token comment\">// 해당폴더를 npm을 쓰는 프로젝트로 정의하겠다</span></code></pre></div>\n<p>npm init이라고 치면 아래와같이 설정글이 뜬다.<br>\n<img src=\"https://images.velog.io/post-images/yhe228/e2b35850-44c2-11ea-bde5-b1499c9eeb90/Screenshot-from-2020-02-01-16-16-50.png\" alt=\"Screenshot from 2020-02-01 16-16-50.png\"></p>\n<p>설정이 완료되면 package.json파일이 생성된다.<br>\n<img src=\"https://images.velog.io/post-images/yhe228/08295760-44c3-11ea-8488-ed86e22436c0/Screenshot-from-2020-02-01-16-18-08.png\" alt=\"Screenshot from 2020-02-01 16-18-08.png\"></p>\n<p>index.js파일을 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와같이 파일을 생성하고 터미널에 <code class=\"language-text\">node index.js</code>라고 입력해주면<br>\n<img src=\"https://images.velog.io/post-images/yhe228/cdc93ad0-44c3-11ea-88c3-ff63fd21259a/Screenshot-from-2020-02-01-16-23-17.png\" alt=\"Screenshot from 2020-02-01 16-23-17.png\"></p>\n<p>이렇게 출력된다.  </p>\n<p>package.json에 아래와 같이 입력하고</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"start\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"node index.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>터미널에 <code class=\"language-text\">npm start</code> 라고 입력해주면</p>\n<p><img src=\"https://images.velog.io/post-images/yhe228/242932e0-44c4-11ea-88c3-ff63fd21259a/Screenshot-from-2020-02-01-16-26-05.png\" alt=\"Screenshot from 2020-02-01 16-26-05.png\"></p>\n<p><code class=\"language-text\">node index.js</code>를 입력했을때와 동일하게 출력된다.</p>\n<h2 id=\"nodemon-\" style=\"position:relative;\"><a href=\"#nodemon-\" aria-label=\"nodemon  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nodemon ?</h2>\n<p>저장사항을 반영해서 즉각적으로 서버를 실행시켜주는 라이브러리이다.\nhttp 서버를 켰을때 변경사항을 바로바로 반영해서 서버를 킬 수 있다.</p>\n<h3 id=\"nodemon-사용방법\" style=\"position:relative;\"><a href=\"#nodemon-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"nodemon 사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nodemon 사용방법</h3>\n<p>먼저 nodemon을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save nodemon</code></pre></div>\n<p>설치가 완료되면 <code class=\"language-text\">package.json</code>의 <code class=\"language-text\">dependencies</code>에 nodemon이 추가된다. </p>\n<p>package.json에서 아래와 같이 입력하고 실행한 후에 index.js파일을 변경한후 저장해주면 nodemoon이 자동적으로 변경사항을 반영하여 다시한번 파일을 실행시켜준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon index.js\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/yhe228/d9d718e0-44c5-11ea-ab20-23d4f42b4bc6/Screenshot-from-2020-02-01-16-38-13.png\" alt=\"Screenshot from 2020-02-01 16-38-13.png\"></p>\n<p>script코드와  nodemon 사용법에 대해 잘 알아두면 유용하다!</p>","frontmatter":{"title":"nodeJS","date":"February 02, 2020"}}},"pageContext":{"slug":"/javascript/nodeJS/","previous":{"fields":{"slug":"/javascript/EventLoop/"},"frontmatter":{"title":"Event Loop?","category":"javascript","draft":false}},"next":{"fields":{"slug":"/javascript/NodeJSExpressBasic/"},"frontmatter":{"title":"express framework - 1(feat. NODE_ENV)","category":"javascript","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}