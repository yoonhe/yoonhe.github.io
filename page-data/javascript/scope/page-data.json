{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/scope/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"8ba97be9-a771-57c4-adfe-75dbc6295d58","excerpt":"Scope : 변수 접근 규칙에 따른 유효 범위 변수는 어떠한 환경 내에서만 사용 가능하며, 프로그래밍 언어는 각각의 변수 접근규칙을 갖고 있다 변수와 그 값이, 어디서부터 어디까지 유효한지를 판단하는 범위 JavaScript는 기본적으로, 함수가 선언되는(lexical) 동시에 자신만의 Scope를 가진다 Rule 1 : Local Scope VS Global Scope 안쪽 Scope에서 바깥 변수/함수를 점근하는 것은 가능 바깥쪽 Scope…","html":"<h2 id=\"scope--변수-접근-규칙에-따른-유효-범위\" style=\"position:relative;\"><a href=\"#scope--%EB%B3%80%EC%88%98-%EC%A0%91%EA%B7%BC-%EA%B7%9C%EC%B9%99%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%9C%A0%ED%9A%A8-%EB%B2%94%EC%9C%84\" aria-label=\"scope  변수 접근 규칙에 따른 유효 범위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope : 변수 접근 규칙에 따른 유효 범위</h2>\n<ul>\n<li>변수는 어떠한 환경 내에서만 사용 가능하며, 프로그래밍 언어는 각각의 변수 접근규칙을 갖고 있다</li>\n<li>변수와 그 값이, 어디서부터 어디까지 유효한지를 판단하는 범위</li>\n<li>JavaScript는 기본적으로, 함수가 선언되는(lexical) 동시에 자신만의 Scope를 가진다</li>\n</ul>\n<h2 id=\"rule-1--local-scope-vs-global-scope\" style=\"position:relative;\"><a href=\"#rule-1--local-scope-vs-global-scope\" aria-label=\"rule 1  local scope vs global scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rule 1 : Local Scope VS Global Scope</h2>\n<ul>\n<li>안쪽 Scope에서 바깥 변수/함수를 점근하는 것은 가능</li>\n<li>바깥쪽 Scope에서 안쪽 변수/함수를 접근하는 것은 불가능</li>\n<li>\n<p>Scope는 중첩이 가능</p>\n<ul>\n<li>함수 안에 함수를 넣을 수 있다</li>\n</ul>\n</li>\n<li>Gloval Scope는 최상단의 Scope로 전역 변수는 어디서는 접근이 가능하다</li>\n<li>지역 변수는 함수 내에서 전역 변수보다 더 높은 우선순위를 가집니다</li>\n</ul>\n<h3 id=\"local-scope-안쪽에서-선언된-변수는-밖에서-사용할-수-없다\" style=\"position:relative;\"><a href=\"#local-scope-%EC%95%88%EC%AA%BD%EC%97%90%EC%84%9C-%EC%84%A0%EC%96%B8%EB%90%9C-%EB%B3%80%EC%88%98%EB%8A%94-%EB%B0%96%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"local scope 안쪽에서 선언된 변수는 밖에서 사용할 수 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Local Scope 안쪽에서 선언된 변수는 밖에서 사용할 수 없다</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span>  greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greetSomeone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">'Josh'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> greeting <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> firstName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">greetSomeone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello Josh\"</span>\nfirstName <span class=\"token comment\">// Uncaught ReferenceError: firstName is not defined</span></code></pre></div>\n<ul>\n<li>\n<p>예시 01</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Heaeun'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Daeun'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 지역변수</span>\n  <span class=\"token comment\">/*\n  * 1. let 키워드를 이용해 새로 선언하였으므로,\n        전역에 선언한 name과는 다른 변수이다\n  * 2. showName 함수 안에서만 접근 가능\n  */</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Heaeun</span>\n<span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Daeun</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Heaeun</span></code></pre></div>\n</li>\n<li>\n<p>예시 02</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Heaeun'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">'Daeun'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 전역변수</span>\n  <span class=\"token comment\">/*\n   * 1. 선언(let)이 없기 때문에,\n        바깥 scope에 있는 name이라는 변수를 가져온다\n  */</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Heaeun</span>\n<span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Daeun </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Daeun</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"rule-2--function-scope-vs-block-scope\" style=\"position:relative;\"><a href=\"#rule-2--function-scope-vs-block-scope\" aria-label=\"rule 2  function scope vs block scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rule 2 : Function Scope VS Block Scope</h2>\n<ul>\n<li>\n<p>Block : 중괄호로 시작하고 끝나는 범위</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i an in the block'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'it works'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"var-키워드-vs-let-키워드\" style=\"position:relative;\"><a href=\"#var-%ED%82%A4%EC%9B%8C%EB%93%9C-vs-let-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"var 키워드 vs let 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>var 키워드 VS let 키워드</h2>\n<ul>\n<li>\n<p>변수를 정의하는 또다른 키워드 var </p>\n<ul>\n<li>JavaScript는 기본적으로, 함수 단위로 자신만의 Scope를 가진다. : var 키워드 (old way)</li>\n<li>그러나, Block 단위로 Scope를 구분했을 때에 예측하기 쉬운 코드를 작성할 수 있다. : let 키워드</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"const-키워드\" style=\"position:relative;\"><a href=\"#const-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"const 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>const 키워드</h2>\n<ul>\n<li>\n<p>값이 변하지 않는 변수, 즉 상수를 정의할 때 사용하는 키워드 </p>\n<ul>\n<li>let 키워드와 동일하게 Block Scope를 따른다</li>\n<li>값을 재정의하려고 하면 TypeError를 낸다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"scope","date":"November 21, 2019"}}},"pageContext":{"slug":"/javascript/scope/","previous":{"fields":{"slug":"/algorithm/pseudocode/"},"frontmatter":{"title":"알고리즘 문제를 어떻게 풀어나갈까?","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/javascript/closure/"},"frontmatter":{"title":"closure","category":"javascript","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}