{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/instantiationPattern/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"4acad7c3-fe2b-5e6e-9333-73d18ff291e9","excerpt":"인스턴스화 패턴은 JavaScript로 무언가를 만드는 방법이다. JavaScript는 객체를 생성하는 4가지 방법을 제공하는데 어떤 방법을 사용하든 모든 방법은 다음과 같은 기능을 제공한다.   object 생성 object에 methods 및 properties 생성 JavaScript에는 아래와 같이 네가지 instantiation pattern이 있다.   Functional Functional-shared Prototypal Pseudoclassical Functional…","html":"<p>인스턴스화 패턴은 JavaScript로 무언가를 만드는 방법이다. JavaScript는 객체를 생성하는 4가지 방법을 제공하는데 어떤 방법을 사용하든 모든 방법은 다음과 같은 기능을 제공한다.  </p>\n<ul>\n<li>object 생성</li>\n<li>object에 methods 및 properties 생성</li>\n</ul>\n<p>JavaScript에는 아래와 같이 네가지 instantiation pattern이 있다.  </p>\n<ol>\n<li>Functional</li>\n<li>Functional-shared</li>\n<li>Prototypal</li>\n<li>Pseudoclassical</li>\n</ol>\n<h2 id=\"functional-instantiation\" style=\"position:relative;\"><a href=\"#functional-instantiation\" aria-label=\"functional instantiation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functional Instantiation</h2>\n<ol>\n<li>함수를 만든다  </li>\n<li>함수 내에서 빈 객체를 만들고 속성과 메소드를 추가한 후 객체를 return 한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Food</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  obj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  obj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">을 먹는 중입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> food1 <span class=\"token operator\">=</span> <span class=\"token function\">Food</span><span class=\"token punctuation\">(</span><span class=\"token string\">'라면'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfood1<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 라면을 먹는 중입니다.</span></code></pre></div>\n<ol>\n<li>\n<p>장점 </p>\n<ul>\n<li>이해하기 쉽다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>모든 메서드가 함수에 내에 포함되어 있어서 매번 인스턴스를 생성할 때마다 메모리에 메소드를 복제한다.</li>\n<li>메소드를 수정 한 후 새 오브젝트를 작성하면 원래 오브젝트와 새 오브젝트가 다른 메소드를 참조한다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"functional-shared-instantiation\" style=\"position:relative;\"><a href=\"#functional-shared-instantiation\" aria-label=\"functional shared instantiation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functional Shared Instantiation</h2>\n<ol>\n<li>함수를 만든다  </li>\n<li>함수 내에서 빈 객체를 만들고 속성을 정의한다.  </li>\n<li>메소드는 다른 객체에 정의해준 후 함수 내의 객체에서 주소값만 참조해준다.  </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">extend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    to<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Food</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  obj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span> <span class=\"token comment\">// point!!!</span>\n  \n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> method <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">eat</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">을 먹는 중입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> food1 <span class=\"token operator\">=</span> <span class=\"token function\">Food</span><span class=\"token punctuation\">(</span><span class=\"token string\">'라면'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 라면을 먹는 중입니다.</span></code></pre></div>\n<ol>\n<li>\n<p>장점 </p>\n<ul>\n<li>메소드의 중복을 제거하여 메모리 관리를 향상시킨다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>메소드를 수정 한 후 새 오브젝트를 작성하면 원래 오브젝트와 새 오브젝트가 다른 메소드를 참조한다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"prototypal-instantiation\" style=\"position:relative;\"><a href=\"#prototypal-instantiation\" aria-label=\"prototypal instantiation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prototypal Instantiation</h2>\n<p>prototype chain을 사용하여 객체를 만든다.(Object.create 사용)</p>\n<ol>\n<li>별도의 객체에 모든 method를 작성한다.</li>\n<li>함수를 만든다.</li>\n<li>함수 안에서 Object.create 메소드를 사용하여 메소드를 참조한다.</li>\n<li>함수 내부의 속성을 정의 한 후 객체를 return 한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Food</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// point!!!</span>\n  \n  obj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> method <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">eat</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">을 먹는 중입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> food1 <span class=\"token operator\">=</span> <span class=\"token function\">Food</span><span class=\"token punctuation\">(</span><span class=\"token string\">'라면'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>\n<p>장점</p>\n<ul>\n<li>메서드는 객체 내에서 반환되지 않고 개체의 프로토 타입에 연결된다</li>\n<li><strong>모든 메소드는 메모리에서 메소드를 복제하지 않고</strong> 작성된 모든 오브젝트에서 사용할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>메소드를 사용하려면 객체를 정의하고 method를 가지고 있는 객체를 prototype으로 하는 객체를 만들어 정의한 객체에 할당해준 다음 생성자 함수에서 리턴해줘야 한다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"pseudoclassical-instantiation\" style=\"position:relative;\"><a href=\"#pseudoclassical-instantiation\" aria-label=\"pseudoclassical instantiation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pseudoclassical Instantiation</h2>\n<ol>\n<li>함수를 만든다</li>\n<li><code class=\"language-text\">this</code> 키워드를 사용하여 속성을 정의한다.</li>\n<li>method는 prototype에 정의한다.</li>\n<li>인스턴스 객체를 만들때에는 <code class=\"language-text\">new</code> 키워드를 사용한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Food</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this 키워드 사용 </span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Food</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">을 먹는 중입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> food1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Food</span><span class=\"token punctuation\">(</span><span class=\"token string\">'라면'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new 키워드 사용</span>\n<span class=\"token function\">ƒ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">을 먹는 중입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfood1<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 라면을 먹는 중입니다.</span></code></pre></div>\n<ol>\n<li>\n<p>장점</p>\n<ul>\n<li>Pseudoclassical Instantiation는 JavaScript에 내장 된 기능을 활용한 가장 최적화 된 객체 생성 방법이다</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>디자인이 조금 복잡하다</li>\n</ul>\n</li>\n</ol>\n<p>💁‍♀️ <a href=\"https://medium.com/dailyjs/instantiation-patterns-in-javascript-8fdcf69e8f9b\">참고블로그</a></p>","frontmatter":{"title":"instantiation pattern 장단점","date":"January 10, 2020"}}},"pageContext":{"slug":"/javascript/instantiationPattern/","previous":{"fields":{"slug":"/javascript/plusplus/"},"frontmatter":{"title":"접미사/접두사 연산자의 차이","category":"javascript","draft":false}},"next":{"fields":{"slug":"/etc/hA01-MultipleChoice/"},"frontmatter":{"title":"객관식 문제 오답풀이","category":"etc","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}