{"componentChunkName":"component---src-templates-blog-post-js","path":"/review/react_3/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"3b785731-6cd0-5c4f-917f-4be5cb1b0d0f","excerpt":"한 것 이미 만들어진 Todo App…","html":"<h3 id=\"한-것\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EA%B2%83\" aria-label=\"한 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 것</h3>\n<ul>\n<li>이미 만들어진 Todo App에 테스트코드 작성해보기</li>\n</ul>\n<h3 id=\"느낀것\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EA%B2%83\" aria-label=\"느낀것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀것</h3>\n<ul>\n<li>기다리고 기다리던 테스트코드에 대해 배우고 사용해보게되었다. 처음에는 무엇을 어떻게 얼만큼 테스트해야할지 감이 잡히지 않아 헤매었지만 트레이너님께서 코드리뷰를 통해 계속해서 피드포워드를 주시면서 방향을 잡아주신덕에 점점 어떤식으로 해야할지 느낌을 찾을 수 있었다.</li>\n<li>과제를 처음 시작했을때는 각각의 하위 컴포넌트에서 자신들이 가진 기능에 대해 테스트를 하고 이러한 자식 컴포넌트를 가지고있는 상위 컴포넌트에서 또 테스트를 하게되면 자식 컴포넌트에서 했던 테스트를 다시 하게되므로 중복되는 테스트가 아닌가 하는 의문을 가지고 시작했었다. 하지만 마지막에 <code class=\"language-text\">App</code> 컴포넌트 테스트를 하면서 아.. 트레이너님이 왜 관심사를 강조하셨는지, 관심사에 따라 테스트도 달라지므로 중복되는 것이 아니라고 하셨는지, 왜 E2E테스트와 유사하게 작성된다고 하셨는지, 동작하는 부분을 테스트하라는 것인지에 대해 알게되었다…ㅎㅎㅎㅎㅎ </li>\n<li>자식컴포넌트는 당연히 상태값에 대해 알수가 없는데 <code class=\"language-text\">mock function</code>을 넣어놓고 상태값이 바뀌기만을 기다리며 리렌더링된 화면을 테스트해주려 매우 노력하고 있는 바보같은 나를 발견할 수 있었다 하하</li>\n<li>테스트 시나리오 작성이 너무 어려웠다.. 영어를 잘 못해서 처음에는 구글 번역기에 한국어로 쳐서 변역해온 문장을 가져왔는데 굉장히 단순하게 처리할 수 있는 시나리오가 너무나 복잡하게 바껴버렸다. 다행히 트레이너님이 피드포워드를 주셔서 어떤식으로 작성하면 될지 아주 조금 감을 잡은 것 같다. 감사합니다!!!</li>\n</ul>\n<h3 id=\"배운것\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9A%B4%EA%B2%83\" aria-label=\"배운것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배운것</h3>\n<ol>\n<li>자식 컴포넌트는 단순히 상위 컴포넌트에서 이벤트 핸들러 함수를 전달 받아 호출하고 상태값을 전달 받아 화면에 그리는것이 관심사이다. 그래서 클릭 이벤트가 발생했을때 클릭 이벤트를 호출하는 역할만하고, 외부에서 어떻게 구현이 되어있고 어떤 로직으로 작동하는지 알 수가 없다. 그러므로 무언가를 전달받아 그리기만하는 자식 컴포넌트에서는 그저 이벤트가 발생했을때 함수가 호출되었는지, 상태값을 받아서 화면에 그리는지만 테스트해주면 된다. 상태값이 어떻게 변화하는지는 관심사가 아니므로 테스트할 필요가 없다.</li>\n<li>\n<p>테스트 케이스를 작성할때, describe ~ context(상황이 나뉘어지는 경우에만 사용) ~ it 구조를 많이 사용한다.</p>\n<ul>\n<li><code class=\"language-text\">describe</code>는 <code class=\"language-text\">테스트하려는 대상을 서술</code></li>\n<li><code class=\"language-text\">context</code>는 <code class=\"language-text\">when, with, without</code>만을 사용해 <code class=\"language-text\">상황(맥락)을 서술</code></li>\n<li><code class=\"language-text\">it</code>은 테스트 내용을 서술</li>\n</ul>\n</li>\n<li>테스트 파일에서 <code class=\"language-text\">describe</code>가 여러개가 될 수도 있기때문에 각 <code class=\"language-text\">describe</code>에서 사용하는 <code class=\"language-text\">변수</code>와 <code class=\"language-text\">함수</code>는 해당하는 <code class=\"language-text\">describe 내부</code>에서 <code class=\"language-text\">선언</code>해주는게 좋다</li>\n<li><code class=\"language-text\">context</code>를 사용했을때는 대비되는 상황에는 무엇을 테스트해주고 싶은지를 생각해보자, 반대의 상황을 테스트할 필요가 없다면 <code class=\"language-text\">context</code>를 사용하지 말자. <code class=\"language-text\">it</code>을 사용하자.</li>\n<li>테스트 시나리오를 작성할때 <code class=\"language-text\">테스트를 통해 확인하고 싶은게 무엇인지</code>에 대해 생각해보자. 항상 테스트를 할때는 <code class=\"language-text\">내가 어떠한 것을 확인하고 싶은가?</code>에 대한 답이 명확하게 나와야한다.</li>\n<li>어디까지 테스트를 해야하나 의문이 든다면 <code class=\"language-text\">구현을 위해 테스트를 하는지</code> <code class=\"language-text\">테스트를 하기위해 구현을 고치고 있진 않은지</code>를 확인해보자</li>\n<li>각 컴포넌트마다 관심사가 다르므로 이 컴포넌트에서는 어떻게 작동할까, 어떻게 사용할까를 생각하면서 테스트하자 </li>\n<li><code class=\"language-text\">mock functions</code>를 범용적으로 사용하면 매번 테스트할때마다 같은 함수를 사용하므로 호출횟수가 누적이 되어 테스트할때 의도치 않은 결과가 나올 수 있다. <code class=\"language-text\">jest.fn</code>이 호출되었을 경우 초기화해주는 기능을 사용하자(<code class=\"language-text\">jest.clearAllMocks()</code>)</li>\n<li><code class=\"language-text\">TDD</code>는 무조건 테스트 코드 먼저 작성하는것이다. <code class=\"language-text\">Red-Green-Refactoring</code> 순서를 항상 지켜야한다.</li>\n<li>리액트 컴포넌트에서 <code class=\"language-text\">Red</code> 단계는 컴포넌트의 인터페이스를 먼저 정의해주는 것이다. 테스트코드에서 props를 미리 넣어주고 렌더링 테스트를 해야한다. 그 후 실패를 확인하고 테스트코드가 통과하도록 컴포넌트를 만들어주고 중복된 코드가 없는지 확인하며 리팩토링해준다. </li>\n<li>TDD에는 2가지의 간단한 룰이 존재한다. 첫번째로 자동화된 테스트에서 실패하지 않는 한 새로운 코드를 작성하지 않는다. 두번째 중복을 제거한다.</li>\n<li>테스트를 서술할때는 문장 그대로가 말이되어야한다.</li>\n</ol>\n<h3 id=\"자기선언\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EA%B8%B0%EC%84%A0%EC%96%B8\" aria-label=\"자기선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자기선언</h3>\n<ul>\n<li>영어공부를 하자</li>\n<li>관심사에 대해 항상 생각하자</li>\n<li>이번주에 배운 테스트코드 내용을 잘 기억해두고 다음 과제에 적용하자</li>\n<li>테스트할때는 항상 무엇을 테스트하고 싶은지에 대해 생각하자</li>\n<li>구현을 위해 테스트하자, 절대 테스트를 통과하기위해 구현부를 임시방편으로 고치지 말자</li>\n</ul>","frontmatter":{"title":"< 코드숨 > 리액트 3주차 회고","date":"February 07, 2021"}}},"pageContext":{"slug":"/review/react_3/","previous":{"fields":{"slug":"/apollo/cacheUpdateAfterMutation/"},"frontmatter":{"title":"< apollo > writeQuery 사용하여 mutation후 캐시 업데이트하기","category":"apollo","draft":false}},"next":{"fields":{"slug":"/testing/useSelectorTesting/"},"frontmatter":{"title":"useSelector 함수를 테스트 코드에서 사용하는 방법","category":"testing","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}