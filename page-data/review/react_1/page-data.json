{"componentChunkName":"component---src-templates-blog-post-js","path":"/review/react_1/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"a7e32d86-09f0-5e40-81a6-9674f20dde2c","excerpt":"한 것 에서  를 사용해 카운터 컴포넌트를 만들었습니다. 변수에 값을 재할당하지 않고 카운터 컴포넌트를 만들었습니다. 계산기 컴포넌트를 만들었습니다. 느낀것…","html":"<h2 id=\"한-것\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EA%B2%83\" aria-label=\"한 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 것</h2>\n<ol>\n<li><code class=\"language-text\">js</code>에서 <code class=\"language-text\">jsx</code> 를 사용해 카운터 컴포넌트를 만들었습니다.</li>\n<li>변수에 값을 재할당하지 않고 카운터 컴포넌트를 만들었습니다.</li>\n<li>계산기 컴포넌트를 만들었습니다.</li>\n</ol>\n<h2 id=\"느낀것\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EA%B2%83\" aria-label=\"느낀것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀것</h2>\n<h3 id=\"1\" style=\"position:relative;\"><a href=\"#1\" aria-label=\"1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1</h3>\n<p>사실 리액트를 사용해 컴포넌트를 만들면서 <code class=\"language-text\">jsx</code> 가 내부적으로 어떻게 동작하여 <code class=\"language-text\">html</code>과 같이 작동하여 화면에 그려지는지에 대해서는 궁금해하지 않았습니다.. 그냥 당연하게 생각하고 사용하였는데 이번 기회를 통해 <code class=\"language-text\">jsx</code>가 어떻게해서 화면에 그려지는건지 알게되어 너무 좋습니다. 앞으로 무엇인가를 사용할때 코드가 마법을 부린다 생각하지 않고 코드의 동작 원리를 알고 사용해야겠다는 생각이 들었습니다.</p>\n<h3 id=\"2\" style=\"position:relative;\"><a href=\"#2\" aria-label=\"2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2</h3>\n<p>처음에는 아래의 코드에만 빠져서 다른방법을 생각하지 못하고 <code class=\"language-text\">count</code>를 증가시켜줘야하는데 어떻게 <code class=\"language-text\">count</code>에 값을 재할당하지 않고 증가시키지?…  이게 말이 되나라고 생각하며 변수에 값을 재할당하지 않고 해결하는 방법을 떠올리지 못하고있었습니다…</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그런데 슬랙에서 다른 수강생분들이 <code class=\"language-text\">재귀함수</code>에 대해 언급해주셔서 <code class=\"language-text\">재귀함수</code>를 이용하니 문제가 해결되었습니다.\n다른 방법이 있을꺼라 생각하지 못하고 한 부분에만 빠져있었던 저를 반성합니다…!\n앞으로 문제를 해결할때 한가지의 방법만 생각하지말고 여러가지 경우의 수를 생각하며 해결해야겠다는 생각이 들었습니다.</p>\n<h3 id=\"3\" style=\"position:relative;\"><a href=\"#3\" aria-label=\"3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3</h3>\n<p>계산기 과제를 시작할때 단계적으로 생각하지않고 계산기 하나를 통으로보고 순서없이 만들다보니 코드도 순서없이 정신없게 작성되고 불필요한 형변환과 예외처리 코드가 정말 많이 들어갔습니다. 그래서 코드리뷰를 받을때도 <code class=\"language-text\">형변환</code>, <code class=\"language-text\">예외처리</code> 에 대한 얘기가 제일 많았던거같습니다. 그리고 제가 <code class=\"language-text\">부정문</code>을 통해 예외처리를 많이 하고있다는 사실도 알게되었습니다.  그리고 이번에 계산기 기능을 구현하면서 너무 쓸데없이 복잡하게 기능을 구현하려 애썼다는 것을 과제풀이 영상과 코드리뷰를 통해 알게되었습니다.. 앞으로는 최대한 간단하게 문제를 해결해야겠다는 생각이 정말 많이 들었습니다.</p>\n<p>아.. 그리고 제일 힘들었던 부분에 대해 까먹을뻔했네요.. if문을 사용하지 않고 해결하는 부분에서 정말 생각도 많이하고 구글링도 많이하고 여러가지 시도를 해보았던거 같습니다. 대체 어떻게 if문을 사용하지 않고 분기를 해줄 수 있을까에 대해 정말 많은 고민을 해보았던거 같습니다. <code class=\"language-text\">고통주도개발</code> 을 사알짝 맛본거같네요 ㅎㅎㅎㅎㅎ…</p>\n<p>이번 기회로 제가 새로 알게된 것들은 아래와 같습니다.</p>\n<ol>\n<li><code class=\"language-text\">부정문</code>으로 예외처리하는것은 읽는 사람에게 두번 고민하게 만든다</li>\n<li>여러 역할을 동시에 처리하려고 할때 <code class=\"language-text\">예외처리</code>가 추가된다. 이럴땐 <code class=\"language-text\">그리기</code> 와 <code class=\"language-text\">계산하기</code> 를 분리해보자</li>\n<li><code class=\"language-text\">예외처리</code>를 사용해 분기를 하기보다는 값들이 있다면 연산을하고 없다면 기존 값을 사용하는 방법을 적용해보자</li>\n<li><code class=\"language-text\">형변환</code>이 필요하게된 원인을 파악하고 애초에 <code class=\"language-text\">형변환</code>이 필요없도록 순수한 값을 내보내자</li>\n<li>무엇인가를 만들때는 가능한 작은 기능 단위로 쪼개고 하나 하나 순차적으로 해결한다</li>\n<li>여러가지의 경우를 예외처리해줄때는 <code class=\"language-text\">if</code>문 보다는 <a href=\"https://omwri.medium.com/javascript-patterns-lookup-tables-26bbaf693e24\"><code class=\"language-text\">Lookup table pattern</code></a> 을 사용하자, 그렇게하면 코드가 깨끗해지고 가독성이 좋아지며 모든 조건이 처리될 때까지 기다릴 필요가 없어진다. </li>\n<li>함수에 너무 많은 파라미터들이 넘어올때는 객체로 묶어주자 → <a href=\"https://www.freecodecamp.org/news/elegant-patterns-in-modern-javascript-roro-be01e7669cbd/\">RORO패턴</a></li>\n<li>변수 네이밍은 줄여쓰지 않는다. </li>\n<li>문제를 최대한 간단하게 해결해보자 </li>\n</ol>\n<p>이번 과제를 통해 새로 알게된점이 많아 정말 좋습니다. 앞으로 코드를 작성하면서 이번 과제에서 알게된 부분을 잘 활용하도록 하겠습니다.  그리고… 정말 코드리뷰를 너무너무 해보고싶었는데 실제로 해보니 생각했던것보다 훨씬 더 좋은거같습니다. 누군가에게 코드에 대한 리뷰와 피드포워드를 받고 점점 좋은방향으로 가고있는 저를 보는 즐거움을 이제야 알았네요.. 정말 너무너무 좋습니다…!!!!! </p>","frontmatter":{"title":"< 코드숨 > 리액트 1주차 회고","date":"January 25, 2021"}}},"pageContext":{"slug":"/review/react_1/","previous":{"fields":{"slug":"/algorithm/toy20-MergeSort/"},"frontmatter":{"title":"Toy problem 20번 - Merge Sort","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/review/react_2/"},"frontmatter":{"title":"< 코드숨 > 리액트 2주차 회고","category":"review","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}