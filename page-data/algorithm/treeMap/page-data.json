{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/treeMap/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"e8de7ad2-2597-5f40-820c-eefcd67213e9","excerpt":"Tree Map Mathod Tree의 메소드인 map을 구현하는데 시간이 오래 걸렸다.. map 메소드는 아래와 같은 특성을 가진다.   기존 객체와 같은 구조이되 객체의 값들은 callback 함수에 순서대로 넣어 실행시킨 값이어야 한다. 기존 객체의 주소값을 참조하면 안됨 => 얇은 복사(shallow copy) 새로운 공간에 기존 객체의 주소값과 상관없는 새로운 객체를 만들어야함 => 깊은 복사(deep copy) 기존 객체는 수정되면 안된다. 새로 만들어진 객체들은 Tree Class…","html":"<h2 id=\"tree-map-mathod\" style=\"position:relative;\"><a href=\"#tree-map-mathod\" aria-label=\"tree map mathod permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tree Map Mathod</h2>\n<p>Tree의 메소드인 map을 구현하는데 시간이 오래 걸렸다..<br>\nmap 메소드는 아래와 같은 특성을 가진다.  </p>\n<ol>\n<li>\n<p>기존 객체와 같은 구조이되 객체의 값들은 callback 함수에 순서대로 넣어 실행시킨 값이어야 한다.</p>\n<ul>\n<li>기존 객체의 주소값을 참조하면 안됨 => 얇은 복사(shallow copy)</li>\n<li>새로운 공간에 기존 객체의 주소값과 상관없는 새로운 객체를 만들어야함 => 깊은 복사(deep copy)</li>\n</ul>\n</li>\n<li>기존 객체는 수정되면 안된다.</li>\n<li>새로 만들어진 객체들은 Tree Class의 instance여야 한다.</li>\n</ol>\n<p>1번을 구현하기 위해 deep copy를 구글링하여 찾아보았다.<br>\nJSON.stringify를 사용하여 객체를 문자로 바꾸고, JSON.parse를 이용하여 문자를 객체로 다시 바꿔주면 복사한 객체와 연결이 끊긴다고한다.  </p>\n<ul>\n<li>JSON.parse(JSON.stringify(this))  </li>\n</ul>\n<p>드디어 이제 문제를 푸는가싶어 기쁜마음으로 코드를 아래와 같이 작성하였다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> cloneObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>cloneObj<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그런데..루트 노드의 constructor만 Tree로 설정되있고, 자식노드들은 Object로 되어있다..<br>\n<img src=\"https://images.velog.io/post-images/yhe228/35220f10-223f-11ea-8a8a-754eee579194/image.png\" alt=\"image.png\">  </p>\n<p>assign을 통해 Tree의 Instance에 JSON.parse(JSON.stringify(this))를 연결해주면 Prototype이 모든 노드에 상속되는줄 알았는데.. 루트 노트에만 상속된다..  </p>\n<p>모든 노드를 순회하면서 Tree의 Instance로 바꿔주려면 어떻게 해야하는지..도무지 감이 안잡힌다.  </p>\n<p>그래서 결국 몇시간을 고민하며 시도해보다가.. 결국 답지를 보았다.. ㅜ  </p>\n<p>reference 코드 전문이다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Tree</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Tree</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addChild</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>child <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>child <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// return the tree for convenience</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Tree</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tree<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>자 이제 내가 고민하고 고민했던 map 메소드를 분석해보자.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Tree</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tree<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"-reference-분석\" style=\"position:relative;\"><a href=\"#-reference-%EB%B6%84%EC%84%9D\" aria-label=\" reference 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😊 reference 분석</h3>\n<ol>\n<li>루트 노드의 자식노드가 담긴 배열의 각 자식노드에 리듀스를 실행한다.</li>\n<li>이때 초기값(initial value) 은 루트 노드의 value를 인자로 받은 callback 함수를 실행한 결과값으로 만들어진 새로운 트리노드이다.</li>\n<li>\n<p>각각의 자식노드에 리듀스를 실행하면 </p>\n<ol>\n<li>첫번째로 현재 자식노드의 자식노드배열의 각 자식 요소에 리듀스 메소드를 실행한다.</li>\n<li>이때 초기값(initial value)은 현재 자식 노드의 value를 인자로 받은 callback 함수를 실행한 결과값으로 만들어진 새로운 트리노드이다.</li>\n<li>만약 현재 자식노드의 자식노드배열이 빈배열이라면 reduce를 실행해 줄 요소들이 없기때문에 초기값만 반환하여 map 메소드를 종료하고 빠져나온다.</li>\n</ol>\n</li>\n<li>현재 초기값(initial value)에 3번에서 얻은 반환값인 새로운 트리노드를 인자로 넣고 addChild 메서드를 적용시킨다.</li>\n<li>addChild 메서드를 실행한 현재 초기값(initial value)이 this가 되고 이 this의 children에 3번에서 얻은 반환값인 새로운 트리노드를 push한다.</li>\n<li>그리고 this를 반환 한다.</li>\n<li>addChild 메서드 실행이 끝나고 reduce로 돌아오면 반환된 this가 다음 자식 요소에 reduce를 실행할때 누적값(accumulate)이 된다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">identity</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninput<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninput<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"map-method-실행순서\" style=\"position:relative;\"><a href=\"#map-method-%EC%8B%A4%ED%96%89%EC%88%9C%EC%84%9C\" aria-label=\"map method 실행순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>map method 실행순서</h3>\n<ul>\n<li>현재 input = {value : 1, children : [{value : 2, children : []}, {value : 3, children : []}]}  </li>\n<li>map 메소드 실행</li>\n<li>첫번째 누적값 = Tree {value : 1, children : []}</li>\n<li>두번째 누적값 = Tree {value : 1, children : [{value : 2, children : []}]}</li>\n<li>세번째 누적값 = Tree {value : 1, children : [{value : 2, children : []}, {value : 3, children : []}]}</li>\n</ul>\n<h3 id=\"-나의-문제점\" style=\"position:relative;\"><a href=\"#-%EB%82%98%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\" 나의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😒 나의 문제점</h3>\n<ul>\n<li>나는 계속 이미 만들어져 있는 객체자체를 전부 복사해서 그 상태에서 프로토타입을 Tree로 바꿔줄 생각만 계속 했다..  </li>\n<li>한가지 방법만 생각한다</li>\n<li>callback 함수를 재귀함수 안에서 실행시켜 return 해주려고 하니 계속 for문이 loop를 돌지않고 callback함수를 한번 돌고 return으로 끊겨 버리니 대체 어떻게하면 재귀함수처럼 loop를 도는 코드 안에서 callback을 return할까.. 이 생각만 계속했다. callback 함수를 실행시켜 반환된 값을 이용해 새로운 인스턴스 객체를 만들면 되는 것을..! callback 함수가 해당 코드에서 어떠한 역할을 하는지 제대로 파악을 못하고 코드를 작성하여 잘못된 방향으로 접근한 것 같다. 다음부터는 테스트코드를 통해 메소드나 callback 함수의 사용 의도를 확실하게 파악한 후 코드작성에 들어가야겠다. </li>\n</ul>","frontmatter":{"title":"Tree Map Mathod","date":"December 16, 2019"}}},"pageContext":{"slug":"/algorithm/treeMap/","previous":{"fields":{"slug":"/algorithm/hashtable/"},"frontmatter":{"title":"hashTable","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/algorithm/timecomplexity/"},"frontmatter":{"title":"timeComplexity","category":"algorithm","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}