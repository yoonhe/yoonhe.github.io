{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/hashtable/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"c8bf6d5d-f8ad-501b-87e3-7d04593c7af0","excerpt":"Hash Table 해시 테이블은 연관배열 구조를 이용하여 키(key)에 결과 값(value)을 저장하는 자료구조이다. 연관배열 구조 : 키 1개와 값 1개가 1:1로 연관되어 있는 자료구조이다. Hash Table 구조 image.png 키는 해시함수를 통해 해시로 변경되고 해시는 값과 매칭되어 저장소에 저장된다. 키(key) 고유한 값으로 해시 함수의 input…","html":"<h2 id=\"hash-table\" style=\"position:relative;\"><a href=\"#hash-table\" aria-label=\"hash table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hash Table</h2>\n<p>해시 테이블은 연관배열 구조를 이용하여 키(key)에 결과 값(value)을 저장하는 자료구조이다.</p>\n<ul>\n<li>연관배열 구조 : 키 1개와 값 1개가 1:1로 연관되어 있는 자료구조이다.</li>\n</ul>\n<h2 id=\"hash-table-구조\" style=\"position:relative;\"><a href=\"#hash-table-%EA%B5%AC%EC%A1%B0\" aria-label=\"hash table 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hash Table 구조</h2>\n<p><img src=\"https://images.velog.io/post-images/yhe228/06d5b8a0-1b1e-11ea-84ae-6db8b11a429d/image.png\" alt=\"image.png\"><br>\n키는 해시함수를 통해 해시로 변경되고 해시는 값과 매칭되어 저장소에 저장된다.</p>\n<ul>\n<li>\n<p>키(key)</p>\n<ul>\n<li>고유한 값으로 해시 함수의 input이 된다.</li>\n<li>다양한 길이의 값이 될 수 있다. 이 상태로 최종 저장소에 저장이 되면 다양한 길이 만큼의 저장소를 구성해 두어야 하기 때문에 해시 함수로 값을 바꾸어 저장이 되어야 공간의 효율성을 높일 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>해시함수(Hash Function)</p>\n<ul>\n<li>키를 해시로 바꿔주는 역할을 한다.</li>\n<li>다양한 길이를 가지고 있는 키를 일정한 길이를 가지는 해시로 변경하여 저장소를 효율적으로 운영하게 해준다.</li>\n<li>서로 다른키가 같은 해시가 되는 경우를 해시 충돌(Hash Collision)이라고 하는데, 해시 충돌 확률을 최대한 줄이기 위한 함수를 만드는 것이 중요하다</li>\n</ul>\n</li>\n<li>해시(Hash) : 해시 함수의 결과물이다, 저장소(bucket)에서 값과 매칭되어 저장된다.</li>\n<li>값(value) : 저장소에(bucket)에 최종적으로 저장되는 값으로 키와 매칭되어 저장, 삭제, 검색, 접근이 가능해야 한다.</li>\n</ul>\n<h2 id=\"mehod\" style=\"position:relative;\"><a href=\"#mehod\" aria-label=\"mehod permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mehod</h2>\n<p>키와 값이 주어졌을때, 아래와 같은 기능을 사용할 수 있다.</p>\n<ul>\n<li>저장 : 해시함수의 결과로 나온 해시와 값을 저장소에 넣는다.</li>\n<li>검색 : 해시함수의 결과로 나온 해시에 매칭되는 값을 찾는다</li>\n<li>제거 : 해시함수의 결과로 나온 해시에 매칭되는 값을 제거한다.</li>\n</ul>\n<h2 id=\"hash-table-동작-원리\" style=\"position:relative;\"><a href=\"#hash-table-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC\" aria-label=\"hash table 동작 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hash table 동작 원리</h2>\n<ol>\n<li>키를 해쉬함수에 넣는다</li>\n<li>해쉬함수는 키를 특정 해시로 변경해준다.</li>\n<li>특정 해시에 값을 넣는다</li>\n<li>앞으로 해당키가 해쉬함수에 들어가면 항상 같은 해시로 변환되어 해시와 매칭되는 값을 리턴한다</li>\n</ol>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시)</h3>\n<p>dog를 넣으면 happy가 나와야할때 해쉬테이블의 기능 </p>\n<ol>\n<li>dog를 해쉬함수에 넣으면</li>\n<li>dog는 1(hash)로 변경된다.</li>\n<li>Array의 1번 인덱스에 happy를 넣는다</li>\n<li>항상 dog를 넣으면 해쉬함수는 1(hash)로 변경해준다.</li>\n<li>Array는 index 1과 매칭되는 값을 반환한다.</li>\n</ol>\n<h2 id=\"hash-function-특징\" style=\"position:relative;\"><a href=\"#hash-function-%ED%8A%B9%EC%A7%95\" aria-label=\"hash function 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hash Function 특징</h2>\n<ol>\n<li>항상 내가 가진 Array 길이 안의 값만 반환할 수 있음 ( 0 to length - 1 )</li>\n<li>특정 키를 넣었을때 항상 같은 값(hash)이 나와야함</li>\n<li>어떠한 저장도 할 수 없음, 그때그때 값을 주면 내뱉을 수 있어야함(기억하는게 아님)</li>\n</ol>\n<h2 id=\"충돌---하나의-hash가-여러개의-값을-가질-경우\" style=\"position:relative;\"><a href=\"#%EC%B6%A9%EB%8F%8C---%ED%95%98%EB%82%98%EC%9D%98-hash%EA%B0%80-%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-%EA%B0%92%EC%9D%84-%EA%B0%80%EC%A7%88-%EA%B2%BD%EC%9A%B0\" aria-label=\"충돌   하나의 hash가 여러개의 값을 가질 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>충돌 - 하나의 Hash가 여러개의 값을 가질 경우</h2>\n<p><img src=\"https://images.velog.io/post-images/yhe228/242cf650-1fcb-11ea-8782-2db8696a2989/image.png\" alt=\"image.png\">\n출처 : 코드스테이츠  </p>\n<h3 id=\"예시-1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-1\" aria-label=\"예시 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<ul>\n<li>\n<p>storage에 값을 직접 넣지 않고, buckets(배열 또는 연결리스트로 구현)을 넣어 두개 이상의 튜플을 넣을 수 있도록 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token number\">0</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> Brenden<span class=\"token operator\">:</span> Eich <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> Steven<span class=\"token operator\">:</span> Tyler <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> Dr<span class=\"token punctuation\">.</span><span class=\"token operator\">:</span> Sunshine <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Alan<span class=\"token operator\">:</span> Turing <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> Mr<span class=\"token punctuation\">.</span><span class=\"token operator\">:</span> Doob <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n  <span class=\"token number\">5</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> George<span class=\"token operator\">:</span> Harrison <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> John<span class=\"token operator\">:</span> Resig <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"array가-계속-늘어난다면\" style=\"position:relative;\"><a href=\"#array%EA%B0%80-%EA%B3%84%EC%86%8D-%EB%8A%98%EC%96%B4%EB%82%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"array가 계속 늘어난다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>array가 계속 늘어난다면?</h2>\n<ul>\n<li>\n<p>Hash Tables Resizing </p>\n<ul>\n<li>Hash Table이 25% ~ 75%가 차있을때 제일 효과적로 운영됨</li>\n<li>25% 이하 : length / 2</li>\n<li>75% 이상 : length * 2</li>\n</ul>\n</li>\n<li>\n<p>코드로 구현 한다면? => <a href=\"https://github.com/codestates/help-desk/issues/934\">참고</a></p>\n<ol>\n<li>\n<p>변경된 사이즈의 스토리지를 새로 생성</p>\n<ul>\n<li>해시 테이블의 스토리지 사이즈를 직접 조절하는 것이 아니라 스토리지를 새로 생성해야함</li>\n</ul>\n</li>\n<li>\n<p>기존에 있던 스토리지에 저장되있던 값들을 전부 다시 해싱해서 새 스토리지에 넣어준다.</p>\n<ul>\n<li>스토리지의 사이즈가 리사이징 되었기 때문에 다시 해싱해야함</li>\n</ul>\n</li>\n<li>1,2번 작업이 끝난후 기존에 있던 스토리지에 새 스토리지 값을 할당해준다.(리사이징된 스토리지와 바꿔치기)</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"hash-table이-on-time-complexity를-가지는-경우\" style=\"position:relative;\"><a href=\"#hash-table%EC%9D%B4-on-time-complexity%EB%A5%BC-%EA%B0%80%EC%A7%80%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"hash table이 on time complexity를 가지는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hash Table이 O(n) Time Complexity를 가지는 경우</h2>\n<ul>\n<li>\n<p>해시테이블이 커질때</p>\n<ul>\n<li>해시테이블을 키워준 후에 모든 요소를 해싱을 다시 해주어야함</li>\n</ul>\n</li>\n<li>해싱된 모든 키가 동일한 버킷에 담길때</li>\n</ul>\n<h2 id=\"해시테이블의-장점\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"해시테이블의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시테이블의 장점</h2>\n<ol>\n<li>\n<p>키를 가지고 빠르게 value에 접근하고 조작할 수 있다</p>\n<ul>\n<li>ex) 주소록 저장(이름, 전화번호의 매칭을 사용해 데이터를 처리)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"해시테이블의-단점\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"해시테이블의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시테이블의 단점</h2>\n<ol>\n<li>순서가 있는 배열에는 어울리지 않는다.</li>\n<li>상하관계가 있거나, 순서가 중요한 데이터의 경우 Hash Table은 어울리지 않다. 순서와 상관없이 key만을 가지고 hash를 찾아 저장하기 때문이다.</li>\n<li>공간 효율성이 떨어진다.</li>\n<li>데이터가 저장되기 전에 미리 저장공간을 확보해 놓아야 한다. 공간이 부족하거나 아예 채워지지 않은 경우가 생길 가능성이 있다.</li>\n</ol>\n<p>💁‍♀️ <a href=\"https://velog.io/@cyranocoding/Hash-Hashing-Hash-Table%ED%95%B4%EC%8B%9C-%ED%95%B4%EC%8B%B1-%ED%95%B4%EC%8B%9C%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EC%9D%B4%ED%95%B4-6ijyonph6o\">참고블로그</a></p>","frontmatter":{"title":"hashTable","date":"December 10, 2019"}}},"pageContext":{"slug":"/algorithm/hashtable/","previous":{"fields":{"slug":"/algorithm/binarysearchtree/"},"frontmatter":{"title":"Binary Search Tree","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/algorithm/treeMap/"},"frontmatter":{"title":"Tree Map Mathod","category":"algorithm","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}