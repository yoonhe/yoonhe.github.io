{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/tree/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"6c59e61d-673e-501b-a6e4-80ce6fe457d5","excerpt":"tree Tree의 예시로 컴퓨터의 directory 구조를 생각해 볼 수 있다. 어떠한 프로그램, 사진, 영상 등을 찾을 때 우리는 폴더에서 폴더로 들어가 찾는다. 이렇게 계층적인 구조를 갖는 것이 트리라 할 수 있다. property image.png 출처 : https://monsieursongsong.tistory.com/6   Root Node : 트리 구조에서 최상위에 존재하는 A와 같은 노드 Node : 트리의 구성요소에 해당하는 A,B,C,D,E,F,G,H,I,J…","html":"<h2 id=\"tree\" style=\"position:relative;\"><a href=\"#tree\" aria-label=\"tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tree</h2>\n<p>Tree의 예시로 컴퓨터의 directory 구조를 생각해 볼 수 있다. 어떠한 프로그램, 사진, 영상 등을 찾을 때 우리는 폴더에서 폴더로 들어가 찾는다. 이렇게 계층적인 구조를 갖는 것이 트리라 할 수 있다.</p>\n<h2 id=\"property\" style=\"position:relative;\"><a href=\"#property\" aria-label=\"property permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>property</h2>\n<p><img src=\"https://images.velog.io/post-images/yhe228/68b60020-1af1-11ea-8101-e9f512609127/image.png\" alt=\"image.png\"><br>\n출처 : <a href=\"https://monsieursongsong.tistory.com/6\">https://monsieursongsong.tistory.com/6</a>  </p>\n<ul>\n<li>Root Node : 트리 구조에서 최상위에 존재하는 A와 같은 노드</li>\n<li>Node : 트리의 구성요소에 해당하는 A,B,C,D,E,F,G,H,I,J와 같은 요소</li>\n<li>Edge : 노드와 노드를 연결하는 연결설</li>\n<li>Terminal Node(Leaf Node) : 밑으로 또 다른 노드가 연결되어 있지 않은 H,I,J,F,G와 같은 노드</li>\n<li>Sub-Tree : 큰 트리(전체)에 속하는 작은 트리</li>\n<li>Level : 트리에서 각 층별로 숫자를 매김</li>\n<li>Height : 트리의 최고 레벨 (3)</li>\n<li>이진트리 : “이진 트리가 되려면, 루트 노드를 중심으로 둘로 나뉘는 두 개의서브트리도 이진 트리이어야 하고, 그 서브 트리의 모든 서브 트리도 이진트리이어야 한다.” </li>\n<li>포화 이진 트리(Full Binary Tree) : 모든 레벨이 꽉 찬 이진 트리</li>\n<li>완전 이진 트리(Complete Binart Tree) : 포화 이진 트리처럼 모든 레벨이 꽉 찬 상태는 아니지만, 차곡차곡 빈 틈 없이 노드가 채워진 이진 트리</li>\n</ul>\n<h2 id=\"이진트리-구현-방법\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95\" aria-label=\"이진트리 구현 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이진트리 구현 방법</h2>\n<p><img src=\"https://images.velog.io/post-images/yhe228/e7ce7810-1af1-11ea-8101-e9f512609127/image.png\" alt=\"image.png\"></p>\n<ul>\n<li>\n<p>하나의 노드가 가지고 있어야 되는 정보</p>\n<ul>\n<li>왼쪽자식, 오른쪽자식의 정보를 담는 변수</li>\n<li>자신이 가지는 데이터</li>\n</ul>\n</li>\n</ul>\n<p>💁‍♀️ <a href=\"https://monsieursongsong.tistory.com/6\">참고블로그</a></p>","frontmatter":{"title":"Tree","date":"December 09, 2019"}}},"pageContext":{"slug":"/algorithm/tree/","previous":{"fields":{"slug":"/algorithm/graph/"},"frontmatter":{"title":"graph","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/til/20191210TIL/"},"frontmatter":{"title":"2019-12-10 TIL","category":"til","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}