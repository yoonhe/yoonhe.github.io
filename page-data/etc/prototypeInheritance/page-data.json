{"componentChunkName":"component---src-templates-blog-post-js","path":"/etc/prototypeInheritance/","result":{"data":{"site":{"siteMetadata":{"title":"Heaeun","author":"Heaeun","siteUrl":"https://yoonhe.github.io","comment":{"disqusShortName":"yoonhe","utterances":"yoonhe/yoonhe.github.io"},"sponsor":{"buyMeACoffeeId":"yoonhe"}}},"markdownRemark":{"id":"0631cbfa-6fc8-53b2-89ca-b9bad0474b64","excerpt":"프로토타입 상속 https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Inheritance \n위의 reference, mdn에서 inheritance를 구현하는 방식을 알아보았다. Teacher() 생성자는 Person()의 메소드를 상속받지 못한 상태이다.  그래서 아래와 같은 코드를 추가해준다. Person.prototype에 정의된 모든 메소드를 사용할 수 있게 되었다..! 하지만 Teacher.prototype…","html":"<h2 id=\"프로토타입-상속\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%83%81%EC%86%8D\" aria-label=\"프로토타입 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토타입 상속</h2>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Inheritance\">https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Inheritance</a> <br>\n위의 reference, mdn에서 inheritance를 구현하는 방식을 알아보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> interests</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    first<span class=\"token punctuation\">,</span>\n    last\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interests <span class=\"token operator\">=</span> interests<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greeting</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi! I\\'m '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>first <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Teacher</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> interests<span class=\"token punctuation\">,</span> subject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Person() 상속</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> interests<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Teacher() 생성자는 Person()의 메소드를 상속받지 못한 상태이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"constructor\", \"greeting\"]</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"constructor\"]</span>\n<span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>greeting <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>그래서 아래와 같은 코드를 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Person.prototype 객체를 가지고 있는 새 객체를 생성하여 Teacher.prototype으로 할당</span>\n\n<span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>greeting<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n  ƒ () {\n    alert('Hi! I\\'m ' + this.name.first + '.');\n  }\n*/</span></code></pre></div>\n<p>Person.prototype에 정의된 모든 메소드를 사용할 수 있게 되었다..!</p>\n<p>하지만 Teacher.prototype의 constructor 속성이 Person()으로 되어있으면 문제의 소지가 있어서 <br>\n고쳐주어야 하므로 아래의 코드를 추가한다.</p>\n<ul>\n<li>\n<p>Teacher.prototype의 constructor 속성이 Person()이 된 이유 </p>\n<ul>\n<li>Teacher.prototype에 Person.prototype을 상속받은 객체를 할당했기 때문</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Teacher<span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/53102889/67208543-ab4caa00-f450-11e9-90e1-6a1ff20d8992.png\" alt=\"image\"></p>\n<h2 id=\"teacherprototypeconstructor--teacher-코드를-추가하는-이유-\" style=\"position:relative;\"><a href=\"#teacherprototypeconstructor--teacher-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%B6%94%EA%B0%80%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0-\" aria-label=\"teacherprototypeconstructor  teacher 코드를 추가하는 이유  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Teacher.prototype.constructor = Teacher 코드를 추가하는 이유 ?</h2>\n<ul>\n<li>\n<p>inheritance : 상속</p>\n<ul>\n<li>한단계의 inheritance라면, 문제가 되지 않는다.</li>\n<li>다만, 연속되는 inheritance chaining이 구현되기 위해서는 constructor를 자기자신으로 지정해 주어야한다</li>\n<li>new 생성자로 생성되는 instance는 constructor 함수를 이용해서 생성되는데 만약 위와같은 Teacher.prototype.constructor = Teacher 코드가 없는 경우라면, 다음의 inheritance에 문제가 생길것이다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"teacher에-새-greeting-함수-부여하기\" style=\"position:relative;\"><a href=\"#teacher%EC%97%90-%EC%83%88-greeting-%ED%95%A8%EC%88%98-%EB%B6%80%EC%97%AC%ED%95%98%EA%B8%B0\" aria-label=\"teacher에 새 greeting 함수 부여하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Teacher에 새 greeting() 함수 부여하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greeting</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello, world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nƒ () {\n  alert('hello, world');\n}\n*/</span></code></pre></div>\n<h2 id=\"질문에-답변해-주신-개발자분의-solution\" style=\"position:relative;\"><a href=\"#%EC%A7%88%EB%AC%B8%EC%97%90-%EB%8B%B5%EB%B3%80%ED%95%B4-%EC%A3%BC%EC%8B%A0-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%B6%84%EC%9D%98-solution\" aria-label=\"질문에 답변해 주신 개발자분의 solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>질문에 답변해 주신 개발자분의 solution</h2>\n<p>  javascript에서는 OOP 구현을 위해 prototype을 이용해 힘들게, inheritance를 구현한다고 생각했어요.<br>\njavascript ES6 문법인 class 에 대해서 알아보시는 방향이 더 좋을 것 같습니다.<br>\n라는 말씀을 해주셨다.</p>\n<ul>\n<li><a href=\"https://poiemaweb.com/js-prototype\">프로토타입 상속 관련</a> </li>\n<li><a href=\"https://github.com/yoonhe/TIL/issues/1\">help desk 게시글 복사내용</a> </li>\n</ul>","frontmatter":{"title":"[Help Desk] 프로토타입 상속 관련 문제","date":"October 21, 2019"}}},"pageContext":{"slug":"/etc/prototypeInheritance/","previous":{"fields":{"slug":"/javascript/prototypeInheritance/"},"frontmatter":{"title":"[Help Desk] 프로토타입 상속 관련 문제","category":"javascript","draft":false}},"next":{"fields":{"slug":"/web/httpRequestMessage/"},"frontmatter":{"title":"HTTP Request message","category":"web","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}